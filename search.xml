<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端学习笔记</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好记性不如烂笔头</p>
<p>学习，总结，收获，成长 </p>
<h3 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML ~ 5"></a>HTML ~ 5</h3><h4 id="1、基础知识"><a href="#1、基础知识" class="headerlink" title="1、基础知识"></a>1、基础知识</h4><h5 id="1-1、常见的标签"><a href="#1-1、常见的标签" class="headerlink" title="1.1、常见的标签"></a>1.1、常见的标签</h5><table>
<thead>
<tr>
<th align="center">常用标签名称</th>
<th align="center">标签</th>
</tr>
</thead>
<tbody><tr>
<td align="center">标题</td>
<td align="center"><code>&lt;h1&gt;&lt;/h1&gt; ~~ &lt;h6&gt;&lt;/h6&gt;</code></td>
</tr>
<tr>
<td align="center">段落</td>
<td align="center"><code>&lt;p&gt;&lt;/p&gt;</code></td>
</tr>
<tr>
<td align="center">水平线</td>
<td align="center"><code>&lt;hr /&gt;</code></td>
</tr>
<tr>
<td align="center">换行</td>
<td align="center"><code>&lt;br /&gt;</code></td>
</tr>
<tr>
<td align="center">文本格式化</td>
<td align="center"><code>&lt;pre&gt;&lt;/pre&gt;</code></td>
</tr>
<tr>
<td align="center">文字斜体</td>
<td align="center"><code>&lt;i&gt;&lt;/i&gt;</code>、<code>&lt;em&gt;&lt;/em&gt;</code></td>
</tr>
<tr>
<td align="center">加粗</td>
<td align="center"><code>&lt;b&gt;&lt;/b&gt;</code>、<code>&lt;strong&gt;&lt;/strong&gt;</code></td>
</tr>
<tr>
<td align="center">下标、上标</td>
<td align="center"><code>&lt;sub&gt;</code> 、<code>&lt;sup&gt;</code></td>
</tr>
<tr>
<td align="center">下划线</td>
<td align="center"><code>&lt;ins&gt;</code></td>
</tr>
<tr>
<td align="center">删除线</td>
<td align="center"><code>&lt;del&gt;</code></td>
</tr>
</tbody></table>
<p><strong>注意：</strong>关于标签这一块，不做过多的列举。具体请看：<a href="https://www.w3school.com.cn/index.html">W3C</a></p>
<h5 id="1-2、表格"><a href="#1-2、表格" class="headerlink" title="1.2、表格"></a>1.2、表格</h5><p><strong>注意：</strong>不适合页面布局，适合数据布局</p>
<p>表格的基本结构：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表格开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格标题，居中显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>...<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tr 行标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 表格头，内容剧中，加粗显示 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>......<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- td 单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>......<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>......<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表格结束 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>表格结构划分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>...<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格的头（放标题之类的内容） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格的主体（放数据主体） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>主体<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格的脚（放表格的脚注） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>脚注<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>表格操作：合并单元格</p>
<ul>
<li>跨行合并：rowspan</li>
<li>跨列合并：colspan</li>
<li>合并思想：将多个内容合并的时候，就会有多于的东西，把它删掉</li>
<li>合并公式：删除的个数 = 合并的个数 – 1</li>
<li>合并顺序：先上 后下 先左 后右</li>
</ul>
<h5 id="1-3、列表"><a href="#1-3、列表" class="headerlink" title="1.3、列表"></a>1.3、列表</h5><p>列表主要有：有序列表、无序列表和自定义列表</p>
<p>有序列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>无序列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>自定义列表：标题+描述内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>定义列表项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项描叙<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>定义列表项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>1、自定义列表中，多个 dd 对应一个 dt；2、建议有序、无序标签后只放 li 标签，其它标签放 li 内</p>
<h5 id="1-4、表单"><a href="#1-4、表单" class="headerlink" title="1.4、表单"></a>1.4、表单</h5><p>通过一个注册案例直接学习表单，简单明了，通俗易懂。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  form: 表单域标签</span></span><br><span class="line"><span class="comment">  input: 重点，具体查看官方文档</span></span><br><span class="line"><span class="comment">  label: 作用是增加用户体验，for 属性规定与哪个表单元素绑定（for 属性值 = 表单元素 id 的属性值）</span></span><br><span class="line"><span class="comment">  textarea: 多行文本域标签</span></span><br><span class="line"><span class="comment">  select: 下拉菜单（可通过 optgroup 进行分组）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">alian</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">caption</span>&gt;</span>青春不常在，抓紧谈恋爱<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/man.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;男&quot;</span>&gt;</span> 男</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/women.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;女&quot;</span>&gt;</span> 女</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;请选择年&quot;</span>&gt;</span>请选择年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1990&quot;</span>&gt;</span>1990<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1991&quot;</span>&gt;</span>1991<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;请选择月&quot;</span>&gt;</span>请选择月<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;birth&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;请选择日&quot;</span>&gt;</span>请选择日<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;01&quot;</span>&gt;</span>01<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;02&quot;</span>&gt;</span>02<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>所在地区<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;湖南&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>婚姻状况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;status&quot;</span>&gt;</span> 已婚</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;status&quot;</span>&gt;</span> 未婚</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>学历<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;本科&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>月薪<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;999999999&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18888888888&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>昵称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王富贵&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>喜欢的类型<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lolita&quot;</span>&gt;</span>萝莉</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;charming&quot;</span>&gt;</span>妩媚</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sexy&quot;</span>&gt;</span>性感</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ripe&quot;</span>&gt;</span>成熟</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;yangboy&quot;</span>&gt;</span>小鲜肉</span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;styleman&quot;</span>&gt;</span>型男</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span>自我介绍<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;introduce&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span>你是个什么样子的人？<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">&quot;40&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我同意注册条款<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-5、三大标签"><a href="#1-5、三大标签" class="headerlink" title="1.5、三大标签"></a>1.5、三大标签</h5><blockquote>
<p>块级标签：独占一行，可设置宽高等属性</p>
</blockquote>
<p>常见：h1~h6，p，div，ul，ol， li 等</p>
<p>特点：</p>
<ul>
<li>总是从新行开始</li>
<li>高度、行高、外边距以及内边距等都是可以控制</li>
<li>宽度默认是容器的 100%</li>
<li>可以容纳内联元素和其它块级元素</li>
</ul>
<blockquote>
<p>行内标签：不占独立区域，不可设置宽高等属性</p>
</blockquote>
<p>常见：a，span，del，em，strong，ins 等</p>
<p>特点：</p>
<ul>
<li>和相邻行内元素在一行上</li>
<li>宽、高无效，但水平方向的 padding 和 margin 可以设置，垂直方向的无效</li>
<li>默认宽度就是它本身内容的宽度</li>
<li>行内元素只能容纳文本或其它行内元素</li>
</ul>
<blockquote>
<p>行内块标签：可设置宽高等</p>
</blockquote>
<p>常见：img，input，td 等</p>
<p>特点：</p>
<ul>
<li><p>和相邻行内（行内块）元素在一行上，但是之间会有空白缝隙</p>
</li>
<li><p>默认宽度就是它本身内容的宽度</p>
</li>
<li><p>高度、行高、外边距以及内边距等都是可以控制</p>
</li>
</ul>
<blockquote>
<p>三者之间的转换方式</p>
</blockquote>
<ul>
<li><p>块转行内：display: inline</p>
</li>
<li><p>行内转块：display: block</p>
</li>
<li><p>块、行内转行内块：display: inline-block</p>
</li>
</ul>
<h5 id="1-6、语义化标签"><a href="#1-6、语义化标签" class="headerlink" title="1.6、语义化标签"></a>1.6、语义化标签</h5><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">语义化含义</th>
<th align="center">标签</th>
<th align="center">语义化含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">header</td>
<td align="center">头部</td>
<td align="center">nav</td>
<td align="center">导航</td>
</tr>
<tr>
<td align="center">article</td>
<td align="center">内容</td>
<td align="center">section</td>
<td align="center">块级</td>
</tr>
<tr>
<td align="center">aside</td>
<td align="center">侧边栏</td>
<td align="center">footer</td>
<td align="center">尾部</td>
</tr>
</tbody></table>
<p><strong>注意：</strong>在 <code>IE9</code> 浏览器中，需要把语义化标签都转换为 <code>块级元素</code></p>
<h5 id="1-7、多媒体标签"><a href="#1-7、多媒体标签" class="headerlink" title="1.7、多媒体标签"></a>1.7、多媒体标签</h5><h6 id="1-7-1、audio-音频"><a href="#1-7-1、audio-音频" class="headerlink" title="1.7.1、audio - 音频"></a>1.7.1、audio - 音频</h6><blockquote>
<p>支持格式：ogg、mp3 和 wav</p>
</blockquote>
<ul>
<li><p>兼容性问题处理</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不同浏览器支持不同的格式，所以我们采取的方案是这个音频准备多个文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./media/snow.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多个 source,多个音频文件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h6 id="1-7-2、video-视频"><a href="#1-7-2、video-视频" class="headerlink" title="1.7.2、video - 视频"></a>1.7.2、video - 视频</h6><blockquote>
<p>支持格式：ogg、mp4 和 webm</p>
</blockquote>
<ul>
<li>兼容性问题处理（同 audio）</li>
</ul>
<h6 id="1-7-3、总结"><a href="#1-7-3、总结" class="headerlink" title="1.7.3、总结"></a>1.7.3、总结</h6><ul>
<li>音频标签与视频标签使用基本一致</li>
<li>在不同浏览器下情况不同，存在兼容性问题</li>
<li>谷歌浏览器把音频和视频标签的自动播放都禁止了，添加 <code>muted</code> 标签可以自己播放</li>
</ul>
<h3 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS ~ 3"></a>CSS ~ 3</h3><h4 id="1、基础知识-1"><a href="#1、基础知识-1" class="headerlink" title="1、基础知识"></a>1、基础知识</h4><h5 id="1-1、样式引用"><a href="#1-1、样式引用" class="headerlink" title="1.1、样式引用"></a>1.1、样式引用</h5><p>样式引用的优先级：行内 &gt; 内部 &gt; 导入/链入外部样式</p>
<p><strong>注意：</strong>链入外部样式采取就近原则（近 html 元素：即近 <code>&lt;body&gt;</code> ）</p>
<ul>
<li><p>内部样式（嵌入样式）：写在<code>&lt;head&gt;&lt;/head&gt;</code>标签内</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;内部样式&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>样式加载：与 html 文件同时加载</p>
</li>
<li><p>行内样式：在开始标签内添加 style 样式属性</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;p style=&quot;color:red;&quot;&gt;内容&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>样式加载：与 html 文件同时加载</p>
</li>
<li><p>外部样式：把 css 样式代码写在独立的一个文件中，再将这个 xx.css 文件引入 html 中</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link href=&quot;xx.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>样式加载：与 html 文件同时加载</p>
</li>
<li><p>导入式：@import</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    <span class="keyword">@import</span> url(<span class="string">&quot;xx.css&quot;</span>);    <span class="comment">/* 位于 style 中第一行 */</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>样式加载：html 文件加载完，再加载样式</p>
</li>
</ul>
<h5 id="1-2、选择器"><a href="#1-2、选择器" class="headerlink" title="1.2、选择器"></a>1.2、选择器</h5><p>关于 CSS 的选择器不做过多赘述，详情具体参见：<a href="https://www.w3school.com.cn/css/index.asp">CSS 选择器</a></p>
<ul>
<li><p>属性选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择具有 disabled 属性的 button 元素 */</span></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">  <span class="attribute">cursor</span>: default</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择具有 type 属性且属性值等于 search 的元素 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=search]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配具有 class 属性且属性值以 black 开头的元素 */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class^=black]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配具有 class 属性且属性值以 black 结尾的元素 */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class$=black]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配具有 class 属性且属性值中含有 black 的元素 */</span></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-attr">[class*=black]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: lightseagreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结构伪类选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 匹配父元素中的第一个子元素 li */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配父元素中的最后一个 li 元素 */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightcoral;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 匹配父元素中第 n 个子元素 li */</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: aqua;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nth-child(n) 详解</span></span><br><span class="line"><span class="comment"> * 1、本质上就是选中第 n 个子元素</span></span><br><span class="line"><span class="comment"> * 2、n: 可以是数字、关键字、公式</span></span><br><span class="line"><span class="comment"> * 3、n: 如果是数字，就是选中第几个</span></span><br><span class="line"><span class="comment"> * 4、常见的关键字: even 偶数、odd 奇数</span></span><br><span class="line"><span class="comment"> * 5、常见公式(如果 n 是公式，则从 0 开始计算)</span></span><br><span class="line"><span class="comment"> *   2n、2n+1、5n ...</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nt-of-type: 选择指定类型的元素</span></span><br><span class="line"><span class="comment"> * nth-child: 选择父元素里面的第几个子元素，不管是第几个类型</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>伪元素选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ::before: 在元素内部的前面插入内容</span></span><br><span class="line"><span class="comment"> * ::after: 在元素内部的后面插入内容</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意事项：</span></span><br><span class="line"><span class="comment"> * 1、必须有 content 属性</span></span><br><span class="line"><span class="comment"> * 2、创建的是一个元素，但是属于行内元素</span></span><br><span class="line"><span class="comment"> * 3、权重: 1</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 添加字体图标 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">22px</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">1px</span> solid lightseagreen;</span><br><span class="line">   <span class="attribute">margin</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;\ea50&#x27;</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;icomoon&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>兄弟选择器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * + : 选中相邻的一个</span></span><br><span class="line"><span class="comment"> * ~ : 选中相邻的全部</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">.first + li &#123;…&#125;</span><br><span class="line"></span><br><span class="line">.first ~ li &#123;…&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-3、三大特性"><a href="#1-3、三大特性" class="headerlink" title="1.3、三大特性"></a>1.3、三大特性</h5><p>层叠性：样式冲突，以最后书写样式为准</p>
<ul>
<li>口诀：长江后浪推前浪，前浪死在沙滩上</li>
</ul>
<p>继承性：子标签继承父标签的部分样式</p>
<ul>
<li>特点：color 和 text-，font-，line- 开头的均可继承</li>
<li>理解：子承父业</li>
<li>优点：简化代码，降低 css 样式的复杂性</li>
<li>口诀：龙生龙，凤生凤，老鼠的儿子生来会打洞</li>
</ul>
<p>优先级</p>
<ul>
<li><p>!important 声明最高</p>
</li>
<li><p>行内样式 &gt; 内部样式 &gt; 外部样式</p>
</li>
<li><p>ID选择器 &gt; class选择器 &gt; 标签选择器 &gt; 通配符</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原则：权值相同，就近原则；不同，高者优先</span></span><br><span class="line"><span class="comment"> * 权值规则</span></span><br><span class="line"><span class="comment"> *   1、统计不同选择器的个数</span></span><br><span class="line"><span class="comment"> *   2、每类选择器的个数乘以相应权值</span></span><br><span class="line"><span class="comment"> *   3、把所有的值相加得出选择器的权值</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">#main div.warning h2 &#123;…&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Id:1         class:1        标签:2</span></span><br><span class="line"><span class="comment"> * 1*100=100    1*10=10        2*1=2</span></span><br><span class="line"><span class="comment"> * 权值：100 + 10 + 2 = 112</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-4、盒子模型"><a href="#1-4、盒子模型" class="headerlink" title="1.4、盒子模型"></a>1.4、盒子模型</h5><p>盒子模型是 CSS 三大必须精通的模块之一</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200728233036.png"></p>
<blockquote>
<p>属性介绍</p>
</blockquote>
<p>宽度：width    |    高度：height</p>
<p>最大宽度：max-width    |    最小宽度：min-width</p>
<p>边框缩写：border: 宽度 样式 颜色    |    圆角边框：border-radius</p>
<p>内边距：值不能设置负值</p>
<ul>
<li><p>padding: 值1     // 四个方向都为 值1</p>
</li>
<li><p>padding: 值1    值2    // 上下 = 值1，左右 = 值2</p>
</li>
<li><p>padding: 值1    值2    值3    // 上 = 值1，左右 = 值2，下 = 值3</p>
</li>
<li><p>padding: 值1    值2    值3    值4    // 上 = 值1，右 = 值2，下 = 值3， 左 = 值4</p>
</li>
</ul>
<p>外边距：值可正可负（值设置同 padding）</p>
<blockquote>
<p>盒模型的种类</p>
</blockquote>
<p>CSS 3 中为了优化盒模型，解决宽度偏差带来的错位问题，可以通过 box-sizing 来指定盒模型</p>
<p>方式：通过指定 content-box、border-box 来改变盒子大小的计算方式</p>
<ul>
<li><p>W3C 标准盒模型：content-box，width 和 height = 内容的宽高</p>
</li>
<li><p>CSS3 盒模型：border-box，width 和 height = 内容的宽度 + border 和 padding</p>
</li>
</ul>
<p><strong>注意：</strong>CSS3 盒模型中，如果添加了padding和border,那么真正放置内容的区域会减小</p>
<p>优缺点：</p>
<ul>
<li>标准盒模型，增加了像素的计算负担，降低了开发效率</li>
<li>C3 盒模型，页面结构更加稳固</li>
</ul>
<blockquote>
<p>常见问题</p>
</blockquote>
<p>问题一：外边距合并并引发外边距塌陷（嵌套盒子）</p>
<p>说明：垂直方向，两个相邻元素都设置外边距，外边距会发生合并，合并后外边距高度 = 两个发生合并外边距的高度中的最大值</p>
<p>外边距合并问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200728233255.png"></p>
<p>外边距塌陷问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200728233341.png"></p>
<p>解决方式：触发形成 BFC</p>
<blockquote>
<p>几个技巧</p>
</blockquote>
<p>技巧一：外边距实现盒子水平居中</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 满足两个条件:</span></span><br><span class="line"><span class="comment"> * 1、必须是块级元素</span></span><br><span class="line"><span class="comment"> * 2、盒子必须指定了宽度</span></span><br><span class="line"><span class="comment"> * 注意：文字居中，text-align: center，其中 0 为像素，可根据需求指定多少</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">width</span>: <span class="number">960px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto &#125;</span><br></pre></td></tr></table></figure>

<p>技巧二：实现盒子水平垂直居中的4种方式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        html,</span><br><span class="line">        body &#123;</span><br><span class="line">            height: 100%;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            line-height: 48px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            border: 1px solid lightblue;</span><br><span class="line">            background: lightcyan;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* body &#123;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 方式 1 : 定位 1 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 缺陷：需要知道盒子的具体宽高，但盒子的宽高可能是动态的（自适应，JS控制等） */</span></span></span><br><span class="line">        /* .box &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            margin-top: -100px;</span><br><span class="line">            margin-left: -250px;</span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 方式 2 : 定位 2 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 缺陷：盒子必须得有宽高，缺一不可 */</span></span></span><br><span class="line">        /* .box &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            right: 0;</span><br><span class="line">            bottom: 0;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 方式 3 : 定位 3 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 好处：不需要宽高 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 缺陷：兼容性不是很好 */</span></span></span><br><span class="line">        /* .box &#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 50%;</span><br><span class="line">            left: 50%;</span><br><span class="line">            transform: translate(-50%, -50%);</span><br><span class="line">        &#125; */</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 方式 4 : 弹性盒模型 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 缺陷：兼容性不好 */</span></span></span><br><span class="line">        body &#123;</span><br><span class="line">            display: flex;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            align-items: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 原则：不谈兼容性，目前来说，基本不考虑兼容性了，那种还拿兼容说事的公司，可以不去了 */</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        box 盒子在 body 水平垂直居中</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>技巧三：关于插入图片和背景图片的处理</p>
<p>插入图片（img）</p>
<ul>
<li><p>更改大小：width 和 height</p>
</li>
<li><p>更改位置：margin 或 padding 盒模型，因为插入图片可以当作盒模型处理</p>
</li>
</ul>
<p>背景图片</p>
<ul>
<li>更改大小：background-size</li>
<li>更改位置：background-position</li>
</ul>
<h5 id="1-5、浮动"><a href="#1-5、浮动" class="headerlink" title="1.5、浮动"></a>1.5、浮动</h5><p>概念：指设置了浮动属性的元素会脱离标准流的控制，移动到其父元素中指定位置的过程</p>
<p>方式：选择器 { float: 属性值; }</p>
<ul>
<li>left: 左浮动    |    right: 右浮动    |    none: 不浮动</li>
</ul>
<p>目的：为了让多个块级元素同一行显示</p>
<p>特性：</p>
<ul>
<li><p>脱离标准流，不占位置，会影响标准流</p>
</li>
<li><p>浮动元素总是找离它最近的父级元素对齐，但不会超出内边距范围</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200728233440.png"></p>
</li>
<li><p>浮动的元素排列位置，跟上一个元素（块级）有关系</p>
<p>如果上一个元素有浮动，则 A 元素顶部会和上一个元素的顶部对齐</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200728233504.png"></p>
<p>如果上一个元素是标准流，则 A 元素顶部会和上一个元素的低部对齐</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200728233509.png"></p>
<p>结论：一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其它子级都需要浮动，这样才能一行对齐显示</p>
</li>
<li><p>元素添加浮动后，元素会具有行内块元素的特性（元素添加浮动后，元素会具有行内块元素的特性来显示相应的浮动）</p>
</li>
</ul>
<p>总结：浮 | 漏 | 特</p>
<ul>
<li>浮：加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面</li>
<li>漏：加了浮动的盒子，不占位置，它原来的位置给了标准流的盒子</li>
<li>特：特别注意，首先浮动的盒子需要和标准流的父级搭配使用，其次浮动可以使元素显示模式体现为行内块特性</li>
</ul>
<blockquote>
<p>清除浮动</p>
</blockquote>
<p>原理：把浮动的盒子圈到里面，让父盒子闭合出口和入口不然它们出来影响其它元素</p>
<p>本质：为了解决父级元素因为子级浮动引起内部高度为 0 的问题</p>
<p>方式：</p>
<ul>
<li><p>clear 属性：选择器 { clear: 属性值; }</p>
</li>
<li><p>额外标签法：在浮动元素末尾添加一个空标签，如：<code>&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</code></p>
</li>
<li><p>触发 BFC</p>
</li>
<li><p>after 伪元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 兼容 IE6/7 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>content: ”.” 里面尽量跟一个小点，或者其它，尽量不要为空，否则火狐 7.0 前的版本会生成空格</p>
</li>
<li><p>before 和 after 双伪元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>BFC</p>
</blockquote>
<p>概念：块级格式化上下文，官方话语就不多说介绍了</p>
<p>目的：形成一个完整独立的空间，让空间里的子元素不会影响到外面的布局</p>
<p>设置 CSS 样式触发 BFC：</p>
<ul>
<li>float 不为 none（就是要有浮动）</li>
<li>position 不为 relative 和 static</li>
<li>overflow 为 auto scroll 和 hidden</li>
<li>display 为 table-cell 或 inline-block</li>
</ul>
<h5 id="1-6、定位"><a href="#1-6、定位" class="headerlink" title="1.6、定位"></a>1.6、定位</h5><p>定位属性：定位模式 和 边偏移</p>
<ul>
<li>定位模式：static    |    relative    |    absolute    |    fixed</li>
<li>边偏移：top    |    bottom    |    left    |    right</li>
</ul>
<blockquote>
<p>定位模式</p>
</blockquote>
<ul>
<li><p>静态定位：static</p>
<p>指定：position: static;</p>
<p>特点：所有元素的默认定位方式，默认标准流</p>
</li>
<li><p>相对定位：relative</p>
<p>指定：position: relative;</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200801190131.png"></p>
<p>基点：以<strong>自己的左上角为基点</strong>移动（相对于自己来移动位置）</p>
<p>特点：</p>
<ul>
<li><p><strong>不脱标</strong>，盒子仍在<strong>标准流</strong>中</p>
</li>
<li><p>通过边偏移移动位置，但是<strong>原来所占的位置，继续占有</strong></p>
</li>
</ul>
</li>
<li><p>绝对定位：absolute</p>
<p>指定：position: absolute;</p>
<p>基点：</p>
<ul>
<li><p>若<strong>父级没有</strong>定位：以<strong>浏览器当前屏幕</strong>为准对齐</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200801190146.png"></p>
</li>
<li><p>若<strong>父级有</strong>定位：将依据<strong>最近的已经定位（绝对、固定或相对定位）的父元素（祖先）</strong>进行定位</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200801190154.png"></p>
</li>
</ul>
<p>特点：<strong>完全脱标，完全不占位置</strong></p>
</li>
<li><p><strong>注意：</strong>如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位</p>
</li>
<li><p>固定定位：fixed</p>
<p>指定：position: fixed;</p>
<p>基点：以<strong>浏览器窗口作为参照物</strong></p>
<p>特点：</p>
<ul>
<li><p>固定定位的元素<strong>跟父亲没有任何关系，只认浏览器</strong></p>
</li>
<li><p>固定定位<strong>完全脱标</strong>，<strong>不占有位置</strong>，<strong>不随着滚动条滚动</strong></p>
</li>
</ul>
</li>
<li><p>叠放次序：z-index</p>
<p>概念：当对多个元素同时设置定位时，定位元素之间有可能会发生重叠</p>
<p>指定：z-index: 2</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200801190551.png"></p>
<p>说明：</p>
<ul>
<li><p>z-index 的默认值是 0，取值越大，定位元素在层叠元素中越居上</p>
</li>
<li><p>如果取值相同，则根据书写顺序，后来居上</p>
</li>
<li><p>后面数字一定不能加单位</p>
</li>
<li><p>只有相对定位，绝对定位和固定定位有此属性</p>
</li>
</ul>
</li>
<li><p>子绝父相（常用技巧）：子级是绝对定位的话，父级要用相对定位</p>
</li>
</ul>
<h4 id="2、2D-效果"><a href="#2、2D-效果" class="headerlink" title="2、2D 效果"></a>2、2D 效果</h4><h5 id="2-1、二维坐标系"><a href="#2-1、二维坐标系" class="headerlink" title="2.1、二维坐标系"></a>2.1、二维坐标系</h5><p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/article/20200801225825.png"></p>
<h5 id="2-2、阴影效果"><a href="#2-2、阴影效果" class="headerlink" title="2.2、阴影效果"></a>2.2、阴影效果</h5><p><strong>文字阴影：text-shadow: X-Offset Y-Offset Blur Color</strong></p>
<p>说明：</p>
<ul>
<li>X-Offset：阴影的水平偏移距离，其值为正值时阴影向右偏移反之向左偏移</li>
<li>Y-Offset：阴影的垂直偏移距离，其值为正值时阴影向下偏移反之向上偏移</li>
<li>Blur：阴影的模糊程度，其值不能是负值，如果值越大阴影越模糊，反之阴影越清晰，值为0则无阴影模糊</li>
<li>Color：阴影的颜色，其可以使用 rgba 色</li>
</ul>
<p><strong>边框阴影：box-shadow: h-shadow v-shadow blur spread color inset</strong></p>
<p>说明：同文字阴影</p>
<ul>
<li><p>spread：阴影的尺寸，值越大，扩散面积越大</p>
</li>
<li><p>inset：外部阴影改为内部阴影</p>
</li>
</ul>
<h5 id="2-3、圆角"><a href="#2-3、圆角" class="headerlink" title="2.3、圆角"></a>2.3、圆角</h5><h5 id="2-4、渐变"><a href="#2-4、渐变" class="headerlink" title="2.4、渐变"></a>2.4、渐变</h5><ul>
<li>线性渐变：指沿着某条直线朝一个方向产生渐变效果</li>
<li>径向渐变：从一个中心点开始沿着四周产生渐变效果</li>
</ul>
<h5 id="2-5、过渡"><a href="#2-5、过渡" class="headerlink" title="2.5、过渡"></a>2.5、过渡</h5><h5 id="2-6、变换"><a href="#2-6、变换" class="headerlink" title="2.6、变换"></a>2.6、变换</h5><blockquote>
<p>translate - 位移</p>
</blockquote>
<ul>
<li><p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">x</span>, <span class="selector-tag">y</span>)</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">n</span>)</span><br><span class="line"><span class="selector-tag">transfrom</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">n</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、最大优点: 不影响其他元素的位置</span></span><br><span class="line"><span class="comment"> * 2、百分比单位: 是相对于本身的宽度和高度来进行计算的</span></span><br><span class="line"><span class="comment"> * 3、行内标签没有效果</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码演示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: lightseagreen;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* 水平垂直移动 100px */</span></span><br><span class="line">  <span class="comment">/* transform: translate(100px, 100px); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 水平移动 100px */</span></span><br><span class="line">  <span class="comment">/* transform: translate(100px, 0) */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 垂直移动 100px */</span></span><br><span class="line">  <span class="comment">/* transform: translate(0, 100px) */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 水平移动 100px */</span></span><br><span class="line">  <span class="comment">/* transform: translateX(100px); */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 垂直移动 100px */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100px</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p>rotate - 旋转</p>
</blockquote>
<ul>
<li><p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 单位是：deg */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(度数)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置旋转中心点 */</span></span><br><span class="line"><span class="selector-tag">transform-origin</span>: <span class="selector-tag">x</span> <span class="selector-tag">y</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rotate - 旋转</span></span><br><span class="line"><span class="comment"> * 1、角度为正时，顺时针; 角度为负时，逆时针</span></span><br><span class="line"><span class="comment"> * 2、默认旋转的中心点是元素的中心点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置旋转中心点</span></span><br><span class="line"><span class="comment"> * 1、参数 x 和 y 用空格隔开</span></span><br><span class="line"><span class="comment"> * 2、默认旋转的中心点是元素的中心点(50%, 50%) 或 (center, center)</span></span><br><span class="line"><span class="comment"> * 3、还可以给 x y 设置像素或者方位名词(top、bottom、left、right、center)</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>scale - 缩放</p>
</blockquote>
<ul>
<li><p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(<span class="selector-tag">x</span>, <span class="selector-tag">y</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>说明</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、参数 x 和 y 用逗号隔开</span></span><br><span class="line"><span class="comment"> * 2、最大优势: 可以设置转换中心点缩放，默认以中心点缩放，而且不影响其他盒子</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>代码演示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="comment">/* 注意，数字是倍数的含义，所以不需要加单位 */</span></span><br><span class="line">    <span class="comment">/* transform: scale(2, 2) */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 实现等比缩放，同时修改宽与高 */</span></span><br><span class="line">    <span class="comment">/* transform: scale(2) */</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* 小于 1 就等于缩放*/</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p>skew - 倾斜</p>
</blockquote>
<blockquote>
<p>以上综合写法</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、同时使用多个转换，格式：transform: translate() rotate() scale() skew()</span></span><br><span class="line"><span class="comment"> * 2、顺序会影响到转换的效果(先旋转会改变坐标轴方向)</span></span><br><span class="line"><span class="comment"> * 3、当同时有位移或者其他属性的时候，要将位移放到最前面</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">200px</span>, <span class="number">0</span>) <span class="built_in">rotate</span>(<span class="number">360deg</span>) <span class="built_in">scale</span>(<span class="number">1.2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、动画"><a href="#3、动画" class="headerlink" title="3、动画"></a>3、动画</h4><h5 id="3-1、基本使用"><a href="#3-1、基本使用" class="headerlink" title="3.1、基本使用"></a>3.1、基本使用</h5><ul>
<li>先定义动画</li>
<li>在调用定义好的动画</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义动画 */</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动画序列: 0% 是动画的开始，100 % 是动画的完成, 这样的规则就是动画序列</span></span><br><span class="line"><span class="comment">     * 动画是使元素从一个样式逐渐变化为另一个样式的效果，可以改变任意多的样式任意多的次数</span></span><br><span class="line"><span class="comment">     * 用百分比来规定变化发生的时间，或用 from 和 to，等同于 0% 和 100%</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用动画( 谁用动画，谁调用 ) */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 调用动画 */</span></span><br><span class="line">    <span class="attribute">animation-name</span>: 动画名称;</span><br><span class="line">     <span class="comment">/* 持续时间 */</span></span><br><span class="line">     <span class="attribute">animation-duration</span>: 持续时间；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2、常见属性"><a href="#3-2、常见属性" class="headerlink" title="3.2、常见属性"></a>3.2、常见属性</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">  <span class="comment">/* 动画名称 */</span></span><br><span class="line">  <span class="attribute">animation-name</span>: move;</span><br><span class="line">  <span class="comment">/* 动画花费时长 */</span></span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="comment">/* 动画速度曲线, 默认值: ease */</span></span><br><span class="line">  <span class="attribute">animation-timing-function</span>: ease;</span><br><span class="line">  <span class="comment">/* 动画等待多长时间执行 */</span></span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="comment">/* 规定动画播放次数 infinite: 无限循环 */</span></span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="comment">/* 是否逆行播放 */</span></span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">  <span class="comment">/* 动画结束之后的状态 */</span></span><br><span class="line">  <span class="attribute">animation-fill-mode</span>: forwards;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 规定动画是否暂停或者播放 */</span></span><br><span class="line">  <span class="comment">/* 常和鼠标经过等其他配合使用 */</span></span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简写说明</span></span><br><span class="line"><span class="comment"> * 1、简写属性里面不包含: animation-paly-state</span></span><br><span class="line"><span class="comment"> * 2、当同时有位移或者其他属性的时候，要将位移放到最前面</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 起始与结束状态 */</span></span><br><span class="line"><span class="selector-tag">animation</span>: <span class="selector-tag">name</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span> <span class="selector-tag">iteration-count</span> <span class="selector-tag">direction</span> <span class="selector-tag">fill-mode</span></span><br></pre></td></tr></table></figure>

<h4 id="4、3D转换"><a href="#4、3D转换" class="headerlink" title="4、3D转换"></a>4、3D转换</h4><h5 id="4-1、基本介绍"><a href="#4-1、基本介绍" class="headerlink" title="4.1、基本介绍"></a>4.1、基本介绍</h5><h6 id="4-1-1、特点"><a href="#4-1-1、特点" class="headerlink" title="4.1.1、特点"></a>4.1.1、特点</h6><ul>
<li>近大远小</li>
<li>物体和面遮挡不可见</li>
</ul>
<h6 id="4-1-2、三维坐标系"><a href="#4-1-2、三维坐标系" class="headerlink" title="4.1.2、三维坐标系"></a>4.1.2、三维坐标系</h6><ul>
<li><p>x 轴：水平向右  –  <strong>注意：x 轴右边是正值，左边是负值</strong></p>
</li>
<li><p>y 轴：垂直向下  –  <strong>注意：y 轴下面是正值，上面是负值</strong></p>
</li>
<li><p>z 轴：垂直屏幕  –  <strong>注意：往外边的是正值，往里面的是负值</strong></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824202524.png"></p>
<h5 id="4-2、位移"><a href="#4-2、位移" class="headerlink" title="4.2、位移"></a>4.2、位移</h5><h6 id="4-2-1、语法"><a href="#4-2-1、语法" class="headerlink" title="4.2.1、语法"></a>4.2.1、语法</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* x、y、z 分别指要移动的轴的方向的距离 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate3d</span>(<span class="selector-tag">x</span>, <span class="selector-tag">y</span>, <span class="selector-tag">z</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意：x, y, z 对应的值不能省略，不需要填写用 0 进行填充 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate3d</span>(100<span class="selector-tag">px</span>, 100<span class="selector-tag">px</span>, 0)</span><br></pre></td></tr></table></figure>

<h5 id="4-3、透视"><a href="#4-3、透视" class="headerlink" title="4.3、透视"></a>4.3、透视</h5><h6 id="4-3-1、介绍"><a href="#4-3-1、介绍" class="headerlink" title="4.3.1、介绍"></a>4.3.1、介绍</h6><ul>
<li>如果想要网页产生 <code>3D</code> 效果就需要透视(理解成 <code>3D</code> 物体投影的 <code>2D</code> 平面上)</li>
<li>实际上模仿人类的视觉位置，可视为安排一直眼睛去看</li>
<li>透视也称为视距，所谓的视距就是人的眼睛到屏幕的距离</li>
<li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li>
<li>透视的单位是像素( px )</li>
</ul>
<h6 id="4-3-2、重点说明"><a href="#4-3-2、重点说明" class="headerlink" title="4.3.2、重点说明"></a>4.3.2、重点说明</h6><ul>
<li><p><strong>透视需要写在被视察元素的父盒子上面</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 结构 */</span></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 样式 */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 写在父盒子上面 */</span></span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824202740.png"></p>
<blockquote>
<p>d：视距，指人的眼睛到屏幕的距离</p>
<p>z： z 轴，z 轴越大(正值)，看到的物体就越大</p>
</blockquote>
</li>
<li><p><code>translateZ</code> 与 <code>perspecitve</code> 的区别</p>
<blockquote>
<p><code>perspecitve</code> 给父级进行设置，<code>translateZ</code> 给子元素进行设置不同的大小</p>
</blockquote>
</li>
</ul>
<h5 id="4-4、旋转"><a href="#4-4、旋转" class="headerlink" title="4.4、旋转"></a>4.4、旋转</h5><ul>
<li><p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * transform: rotateX(45deg) -- 沿着 x 轴正方向旋转 45 度</span></span><br><span class="line"><span class="comment"> * transform: rotateY(45deg) -- 沿着 y 轴正方向旋转 45 度</span></span><br><span class="line"><span class="comment"> * transform: rotateZ(45deg) -- 沿着 z 轴正方向旋转 45 度</span></span><br><span class="line"><span class="comment"> * transform: rotate3d(x, y, z, 45deg) -- 沿着自定义轴旋转 45 deg 为角度</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * x, y, z 表示旋转轴的矢量，是标识你是否希望沿着该轴进行旋转，最后一个标识旋转的角度</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>rotateX — 左手准则</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左手的手拇指指向 x 轴的正方向</span></span><br><span class="line"><span class="comment"> * 其余手指的弯曲方向就是该元素沿着 x 轴旋转的方向</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824202827.png"></p>
<ul>
<li><p>rotateY — 左手准则</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左手的拇指指向 y 轴的正方向</span></span><br><span class="line"><span class="comment"> * 其余的手指弯曲方向就是该元素沿着 y 轴旋转的方向(正值)</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824202838.png"></p>
<h5 id="4-5、3D呈现"><a href="#4-5、3D呈现" class="headerlink" title="4.5、3D呈现"></a>4.5、3D呈现</h5><ul>
<li><p><code>transform-style</code></p>
</li>
<li><p>说明</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制子元素是否开启三维立体环境</span></span><br><span class="line"><span class="comment"> * flat: 默认值，不开启</span></span><br><span class="line"><span class="comment"> * preserve-3d: 开启</span></span><br><span class="line"><span class="comment"> * 代码写给父级，但是影响的是子盒子</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5、常见问题与技巧"><a href="#5、常见问题与技巧" class="headerlink" title="5、常见问题与技巧"></a>5、常见问题与技巧</h4><h5 id="5-1、常见问题"><a href="#5-1、常见问题" class="headerlink" title="5.1、常见问题"></a>5.1、常见问题</h5><p><strong>问题 1：</strong><code>display</code>、<code>visibility</code> 和 <code>overflow</code> 三者的区别（面试题）</p>
<ul>
<li><p>display：强调显示</p>
</li>
<li><p>display: none，隐藏对象</p>
</li>
<li><p>display: block，除了转换成块级元素之外，同时还有显示元素的意思</p>
</li>
</ul>
<p>特点：<strong>隐藏之后，不再保留位置</strong></p>
<ul>
<li>visibility：强调可见性</li>
<li>visibility: visible，显示</li>
<li>visibility: hidden，隐藏</li>
</ul>
<p>特点：<strong>隐藏之后，继续保留原有位置</strong></p>
<ul>
<li>overflow：强调溢出</li>
<li>overflow: hidden，不显示超过对象尺寸的内容，超出的部分隐藏掉</li>
</ul>
<p><strong>问题 2：</strong>为什么图片底部会有一条白色缝隙？（面试题）</p>
<p>原因：图片的默认对齐是以文字的基线对齐的</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200801194833.png"></p>
<p>解决：改变图片，使得图片不与基线对齐，与底线对齐即可</p>
<h5 id="5-2、常用技巧"><a href="#5-2、常用技巧" class="headerlink" title="5.2、常用技巧"></a>5.2、常用技巧</h5><p><strong>技巧 1：</strong>溢出的文字隐藏</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><h4 id="1、基础知识-2"><a href="#1、基础知识-2" class="headerlink" title="1、基础知识"></a>1、基础知识</h4><h5 id="1-1、兼容处理"><a href="#1-1、兼容处理" class="headerlink" title="1.1、兼容处理"></a>1.1、兼容处理</h5><blockquote>
<p>兼容移动端主流浏览器，处理 <code>Webkit</code> 内核浏览器即可</p>
</blockquote>
<h5 id="1-2、视口"><a href="#1-2、视口" class="headerlink" title="1.2、视口"></a>1.2、视口</h5><ul>
<li><p>布局视口，视觉视口 和 理想视口，重点关注：理想视口</p>
</li>
<li><p>理想视口：将布局视口的宽度，通过 <code>meta</code> 标签修改为视觉视口</p>
</li>
<li><p>代码体现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * width: 设置宽度是设备的宽度</span><br><span class="line"> * initial-scale: 初始缩放比</span><br><span class="line"> * max/minimum: 最大最小缩放比</span><br><span class="line"> * user-scalable: 用户是否可以缩放</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-3、二倍图"><a href="#1-3、二倍图" class="headerlink" title="1.3、二倍图"></a>1.3、二倍图</h5><ul>
<li><p>原因：一张图片放手机上显示会按照物理像素比进行缩放，所以准备的图片需要比实际需要的大 2 倍</p>
</li>
<li><p>目的：避免图片模糊</p>
</li>
<li><p>扩展：多倍图，3/4/…等倍数，具体看实际需求</p>
</li>
<li><p>目标：上述主要争对插入图，背景图看下面介绍</p>
</li>
<li><p>背景缩放</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单位: 长度|百分比|cover|contain</span></span><br><span class="line"><span class="comment"> * cover: 把背景图像扩展至足够大，以使背景图像完全覆盖背景区域</span></span><br><span class="line"><span class="comment"> * contain: 把背景图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域</span></span><br><span class="line"><span class="comment"> * 目标: 主要是正对背景图片的处理</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background-size</span>: 背景图片宽度 背景图片高度;</span><br></pre></td></tr></table></figure>
</li>
<li><p>背景精灵图</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、将精灵图等比例缩放为原来的一半</span></span><br><span class="line"><span class="comment"> * 2、根据缩放后的精灵图进行选取测量</span></span><br><span class="line"><span class="comment"> * 3、注意: 代码里 background-size, 也要写明宽度原来的一半</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-4、开发"><a href="#1-4、开发" class="headerlink" title="1.4、开发"></a>1.4、开发</h5><ul>
<li><p>形式：移动端页面单独做（主流）或者响应式开发（费时、麻烦）</p>
</li>
<li><p>样式初始化：推荐 <code>normalize.css</code></p>
</li>
<li><p>盒模型选择</p>
<blockquote>
<p>传统模式宽度计算: 盒子的宽度 = CSS中设置的width + border + padding</p>
<p>CSS3盒子模型: 盒子的宽度=  CSS中设置的宽度width 里面包含了 border 和 padding</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*CSS3 盒子模型（IE 盒模型）*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*传统盒子模型（W3C 盒模型）*/</span></span><br><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">content-box</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择 */</span></span><br><span class="line">移动端可以全部使用 <span class="selector-tag">CSS3</span> 盒子模型</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">PC</span> 端如果完全需要兼容，就用传统模式，如果不考虑兼容性，就选择 <span class="selector-tag">CSS3</span> 盒子模型</span><br></pre></td></tr></table></figure>
</li>
<li><p>特殊样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 点击高亮 设置为 transparent 完成透明 */</span></span><br><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">transparent</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在移动端浏览器默认的外观在 iOS 上加上这个属性才能给按钮和输入框自定义样式 */</span></span><br><span class="line"><span class="selector-tag">-webkit-appearance</span>: <span class="selector-tag">none</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用长按页面时的弹出菜单 */</span></span><br><span class="line"><span class="selector-tag">-webkit-touch-callout</span>: <span class="selector-tag">none</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2、页面布局方案"><a href="#2、页面布局方案" class="headerlink" title="2、页面布局方案"></a>2、页面布局方案</h4><blockquote>
<p>移动端单独制作</p>
</blockquote>
<ul>
<li><p>流式布局（百分比布局）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: 100%</span><br><span class="line"><span class="comment">/* 避免因为 无限缩放/放大 而导致变形 */</span></span><br><span class="line"><span class="selector-tag">max-width</span>: 960<span class="selector-tag">px</span>（具体视情况定值）;</span><br><span class="line"><span class="selector-tag">min-width</span>: 320<span class="selector-tag">px</span>（具体视情况定值）;</span><br></pre></td></tr></table></figure>
</li>
<li><p>flex 弹性布局（强烈推荐）</p>
<blockquote>
<p>原理</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、任何一个容器 都可以指定为 flex 布局</span></span><br><span class="line"><span class="comment"> * 2、当为父盒子设为 flex 布局后，子元素的 float、clear 和 vertical-align 属性将失效</span></span><br><span class="line"><span class="comment"> * 3、采用 Flex 布局的元素，称为 Flex 容器，它的所有子元素自动成为容器成员，称为 Flex 项目</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">总结: 通过给父盒子添加<span class="selector-tag">flex</span>属性，来控制子盒子的位置和排列方式</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常见父属性</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认主轴: x, 默认侧轴: y, 元素是跟着主轴来排列的</span></span><br><span class="line"><span class="comment"> * 主轴侧轴可以设置</span></span><br><span class="line"><span class="comment"> * 具体查文档</span></span><br><span class="line"><span class="comment"> * 注意: 使用之前确定好谁是主轴</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="selector-tag">flex-direction</span>: 设置主轴的方向</span><br><span class="line"><span class="selector-tag">justify-content</span>: 设置主轴上的子元素排列方式</span><br><span class="line"><span class="selector-tag">flex-wrap</span>: 设置子元素是否换行</span><br><span class="line"><span class="selector-tag">align-content</span>: 设置侧轴上的子元素的排列方式（多行）</span><br><span class="line"><span class="selector-tag">align-items</span>: 设置侧轴上的子元素排列方式（单行）</span><br><span class="line"><span class="selector-tag">flex-flow</span>: 复合属性，相当于同时设置了 <span class="selector-tag">flex-direction</span> 和 <span class="selector-tag">flex-wrap</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>常见子属性</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义子项目分配 剩余空间，用 flex 来表示占多少份数</span></span><br><span class="line"><span class="comment"> * 剩余空间: 就是若干个子盒子中除了给了固定宽度/高度之外剩余的空间</span></span><br><span class="line"><span class="comment"> * 注意: 分配的是剩余空间</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="selector-tag">flex</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* 默认值 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性</span></span><br><span class="line"><span class="comment"> * 默认值为 auto, 表示继承父元素的 align-items 属性，如果没有父元素, 则等同于 stretch</span></span><br><span class="line"><span class="comment"> * 注意: 允许单个项目</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="selector-tag">align-self</span>: <span class="selector-tag">flex-end</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义项目的排列顺序</span></span><br><span class="line"><span class="comment"> * 数值越小，排列越靠前</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="selector-tag">order</span>: &lt;<span class="selector-tag">number</span>&gt;; <span class="comment">/* 默认值 0 */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>less + rem + 媒体查询布局</p>
<blockquote>
<p>rem 和 em</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * em: 相对于父元素字体大小</span></span><br><span class="line"><span class="comment"> * rem: 相对于根元素( html )字体大小</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">10em</span>; <span class="comment">/* 10 * 12px = 120px */</span></span><br><span class="line">   <span class="attribute">width</span>: <span class="number">10rem</span>; <span class="comment">/* 10 * 14px = 140px */</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;p&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>媒体查询</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @media开头, 注意@符号</span></span><br><span class="line"><span class="comment"> * mediatype: 媒体类型, all | print | screen</span></span><br><span class="line"><span class="comment"> * and|not|only: 关键字, 相当于 且 | 非 | 仅</span></span><br><span class="line"><span class="comment"> * media feature: 媒体特性必须有小括号包含, width | max-width | min-width</span></span><br><span class="line"><span class="comment"> * 书写规范: 从小到大 or 从大到小</span></span><br><span class="line"><span class="comment"> * 注意: 媒体类型 和 关键字 以及 媒体特性的单位 &quot;px&quot; 不能省略 </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span> (media feature) &#123;</span><br><span class="line">    <span class="selector-tag">CSS-Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>less 基础</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、变量</span></span><br><span class="line"><span class="comment"> * 形式: @变量名: 值;</span></span><br><span class="line"><span class="comment"> * 规范: 必须有@为前缀, 不能包含特殊字符, 不能以数字开头, 大小写敏感</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">@color: pink;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、编译</span></span><br><span class="line"><span class="comment"> * 插件: Easy LESS</span></span><br><span class="line"><span class="comment"> * 使用: 编写的 less 文件，保存便会自动生成一个同名的 css 文件</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3、嵌套</span></span><br><span class="line"><span class="comment"> * 子元素的样式直接写到父元素里面</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">/* css 写法 */</span></span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* less 写法 */</span></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">    .logo &#123;</span><br><span class="line">       <span class="selector-tag">width</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 伪类/伪元素/交集嵌套:  需要 &amp; 连接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">      <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 4、运算</span></span><br><span class="line"><span class="comment"> * 对象: 任何数字、颜色或者变量</span></span><br><span class="line"><span class="comment"> * 符号: 加（+）、减（-）、乘（*）、除（/）</span></span><br><span class="line"><span class="comment"> * 单位: 两数参与运算，相同结果取同单位, 不同则取第一个数的单位</span></span><br><span class="line"><span class="comment"> * 规则: 同数学, 先乘除后加减，有括号先算括号</span></span><br><span class="line"><span class="comment"> * 注意: 运算符中间左右有个空格隔开, 例如: 1px + 5</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">/* Less 里面写 */</span></span><br><span class="line">@witdh: 10px + 5;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: @witdh solid red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 生成的 css */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">15px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>适配方案</p>
</blockquote>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方案 1</span></span><br><span class="line"><span class="comment"> * less + 媒体查询 + rem</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">动态设置 <span class="selector-tag">html</span> 标签的 <span class="selector-tag">font-size</span> 大小</span><br><span class="line">1、假设设计稿是 750<span class="selector-tag">px</span> <span class="selector-tag">-</span>&gt; 页面元素值（<span class="selector-tag">px</span>）</span><br><span class="line">2、假设我们把整个屏幕划分为 15 等份（划分标准不一可以是 20 份也可以是 10 等份）</span><br><span class="line">3、每一份作为 html 字体大小，这里就是 750px / 15 = 50px（屏幕宽度 / 划分的份数）</span><br><span class="line">4、那么在 320px 设备的时候，字体大小为 320px / 15 = 21.33px</span><br><span class="line">5、用 页面元素的大小 除以 不同的 <span class="selector-tag">html</span> 字体大小 会发现他们比例还是相同的</span><br><span class="line">比如:</span><br><span class="line">以 750<span class="selector-tag">px</span> 为标准设计稿</span><br><span class="line">一个 100*100 像素的页面元素在 750px 屏幕下, 就是 100 / 50 = 2rem, 即 2rem*2rem, 比例是 1:1</span><br><span class="line">总结:</span><br><span class="line">页面元素的 rem 值 = 页面元素值（px）/（屏幕宽度 / 划分的份数）</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方案 2（推荐）</span></span><br><span class="line"><span class="comment"> * flexible.js + rem</span></span><br><span class="line"><span class="comment"> * flexible.js: 移动端适配库</span></span><br><span class="line"><span class="comment"> * 插件: cssrem -&gt; px 转换 rem</span></span><br><span class="line"><span class="comment"> * 插件好处: 代替 less 的简便换算</span></span><br><span class="line"><span class="comment"> * 插件默认: font-size: 16px</span></span><br><span class="line"><span class="comment"> * 插件默认值改变: 点开 vs code 设置（用户区） -&gt; 更多操作 -&gt; 打开 settings.json -&gt; 配置 settings.json -&gt; 搜索 cssroot -&gt; 配置 &quot;cssrem.rootFontSize&quot;（左边不要修改）-&gt; 点击 复制到设置, 到右边修改 -&gt; 改成你需求的值 -&gt; 重启 vs code</span></span><br><span class="line"><span class="comment"> * 注意: 如果当屏幕大于 750px 的时候希望不要再去重置 html 字体, 所以要自己通过媒体查询设置一下, 并且要把权重提到最高</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="comment">/* 媒体查询设置 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">750px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* !important 提权到最高 */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">75px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">好处: 再也不需要再写不同屏幕的媒体查询</span><br><span class="line">原理: 把当前设备划分为 10 等份，但是不同设备下，比例还是一致的</span><br><span class="line">比如:</span><br><span class="line">当前设计稿是 750px, 那么只需要把 html 文字大小设置为 75px (750px / 10) 就可以</span><br><span class="line">总结:</span><br><span class="line">页面元素的 rem 值 = 页面元素值（px） / 75, 剩余的，让 flexible.js 去算</span><br></pre></td></tr></table></figure>
</li>
<li><p>混合布局</p>
</li>
</ul>
<blockquote>
<p>响应式</p>
</blockquote>
<ul>
<li>媒体查询</li>
<li>BootStrap</li>
</ul>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h4 id="1、基础语法"><a href="#1、基础语法" class="headerlink" title="1、基础语法"></a>1、基础语法</h4><h5 id="1-1、变量"><a href="#1-1、变量" class="headerlink" title="1.1、变量"></a>1.1、变量</h5><ul>
<li><p>概念：程序在内存中申请的一块用来存放数据的空间</p>
</li>
<li><p>使用及注意方面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var [变量名] = 值（ 声明 + 赋值 + 初始化 ）</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时声明多个变量，用 &quot;,&quot; 隔开</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖性</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">18</span>;</span><br><span class="line">x = <span class="number">81</span></span><br><span class="line"><span class="built_in">console</span>.log(x)    <span class="comment">// 81</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只声明, 不赋值</span></span><br><span class="line"><span class="keyword">var</span>  x;</span><br><span class="line"><span class="built_in">console</span>.log (x);    <span class="comment">// undefined</span></span><br><span class="line">原因: </span><br><span class="line"></span><br><span class="line"><span class="comment">// 不声明, 只赋值</span></span><br><span class="line">x = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log (x);    <span class="comment">// 10</span></span><br><span class="line">原因: </span><br><span class="line"></span><br><span class="line"><span class="comment">// 不声明, 不赋值, 直接使用</span></span><br><span class="line"><span class="built_in">console</span>.log (x);    <span class="comment">// 报错</span></span><br><span class="line">原因: </span><br></pre></td></tr></table></figure>
</li>
<li><p>命名规范</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、由字母、数字、下划线、美元符号组成;</span></span><br><span class="line"><span class="comment"> * 2、严格区分大小写;</span></span><br><span class="line"><span class="comment"> * 3、不能以数字开头;</span></span><br><span class="line"><span class="comment"> * 4、不能是关键字、保留字;</span></span><br><span class="line"><span class="comment"> * 5、变量名必须有意义;</span></span><br><span class="line"><span class="comment"> * 6、遵守驼峰命名法.</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-2、数据类型"><a href="#1-2、数据类型" class="headerlink" title="1.2、数据类型"></a>1.2、数据类型</h5><ul>
<li><p>Number</p>
<blockquote>
<p>整数、小数、负数、进制</p>
</blockquote>
<blockquote>
<p>最大值：Number.MAX_VALUE，最小值：Number.MIN_VALUE</p>
</blockquote>
<blockquote>
<p>特殊值：NaN，代表一个非数值，即非有效数字</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">注意: <span class="literal">NaN</span> 和谁都不相等，包括自己</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * isNaN([value])</span></span><br><span class="line"><span class="comment"> * 作用: 判断该值是不是一个非数字</span></span><br><span class="line"><span class="comment"> * true: 不是有效数字</span></span><br><span class="line"><span class="comment"> * false: 是有效数字</span></span><br><span class="line"><span class="comment"> * 原理: 先检测 value 是否为数字，是则输出 false，不是则进行数据类型转换后再检测</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">var</span> usrAge = <span class="number">21</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(userAge));    <span class="comment">// false，21 不是一个非数字</span></span><br><span class="line"><span class="keyword">var</span> usrName = <span class="string">&quot;andy&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(userName));    <span class="comment">// true，&quot;andy&quot; 是一个非数字</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>String</p>
<blockquote>
<p>特点：字符串型可以是引号中的 <code>任意文本</code>，其语法为：双引号 和 单引号</p>
</blockquote>
<blockquote>
<p>嵌套：外双内单，外单内双</p>
</blockquote>
<blockquote>
<p>转义符：\n …等等，具体查文档</p>
</blockquote>
<blockquote>
<p>长度：String(定义的字符串).length</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拼接</span></span><br><span class="line"><span class="comment"> * 形式: 使用 + 进行拼接，字符串 + 任何类型 = 拼接之后的新字符串</span></span><br><span class="line"><span class="comment"> * 辨析 + 口诀: 数值相加，字符相连</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">alert(<span class="string">&#x27;hello&#x27;</span> + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;world&#x27;</span>); <span class="comment">// hello world</span></span><br><span class="line">alert(<span class="string">&#x27;100&#x27;</span> + <span class="string">&#x27;100&#x27;</span>);             <span class="comment">// 100100</span></span><br><span class="line">alert(<span class="string">&#x27;11&#x27;</span> + <span class="number">12</span>);                 <span class="comment">// 1112</span></span><br><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">alert(<span class="string">&#x27;我今年&#x27;</span> + age + <span class="string">&#x27;岁啦&#x27;</span>);     <span class="comment">// 我今年18岁啦</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Boolean</p>
<blockquote>
<p>值：true 和 false</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 布尔型和数字型相加，true 的值为 1，false 的值为 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="number">1</span>);  <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Undefined</p>
<p>含义：未定义</p>
</li>
<li><p>Null</p>
<p>含义：空对象指针</p>
</li>
<li><p>Object</p>
</li>
<li><p>获取变量数据类型</p>
<blockquote>
<p>typeof [变量]</p>
</blockquote>
</li>
<li><p>数据类型转换</p>
<blockquote>
<p>其它类型    —&gt;    Number</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 1</span></span><br><span class="line"><span class="comment"> * parseInt(字符串): 把一个字符串中的整数部分解析出来</span></span><br><span class="line"><span class="comment"> * parseFloat(字符串): 把一个字符串中小数(浮点数)部分解析出来</span></span><br><span class="line"><span class="comment"> * 特点: 遇到一个非有效数字字符，查找结束</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;13.5px&#x27;</span>)             <span class="comment">// 13</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;13.5px&#x27;</span>)         <span class="comment">// 13.5</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;width:13.5px&#x27;</span>)    <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 2</span></span><br><span class="line"><span class="comment"> * Number(变量) - 强制转换</span></span><br><span class="line"><span class="comment"> * 如果当前字符串中出现任意一个非有效数字字符，结果则为 NaN（重点）</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;13&#x27;</span>)             <span class="comment">// 13</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;13px&#x27;</span>)            <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;13.5&#x27;</span>)            <span class="comment">// 13.5</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>)            <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>)        <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">&#x27;&#x27;</span>)                 <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 3</span></span><br><span class="line"><span class="comment"> * 浏览器自动转换 - 强制转换</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其它类型    —&gt;    String</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 1</span></span><br><span class="line"><span class="comment"> * 变量.toString()</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line">(&#123;&#125;).toString()         <span class="comment">// &#x27;[object Object]&#x27;</span></span><br><span class="line">[<span class="number">12</span>,<span class="number">23</span>].toString()         <span class="comment">// &#x27;12,23&#x27;</span></span><br><span class="line">[<span class="number">12</span>].toString()            <span class="comment">// &#x27;12&#x27;</span></span><br><span class="line">/^$/.toString()         <span class="comment">// &#x27;/^$/&#x27;</span></span><br><span class="line">[].toString()             <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 2 - 强制转换</span></span><br><span class="line"><span class="comment"> * String(变量)</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 3 - 隐式转换</span></span><br><span class="line"><span class="comment"> * &quot;+&quot; 号拼接</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其它类型    —&gt;    Boolean</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式: Boolean()</span></span><br><span class="line"><span class="comment"> * JS中只有“0/NaN/空字符串/null/undefined”这五个值转换为布尔类型的false，其余都转换为true</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-3、运算符"><a href="#1-3、运算符" class="headerlink" title="1.3、运算符"></a>1.3、运算符</h5><ul>
<li><p>算术运算符</p>
<blockquote>
<p>加（+）减（-）乘（*）除（/），取余数（取模）（%）</p>
</blockquote>
<blockquote>
<p>表达式：由数字、运算符、变量等组成的式子</p>
</blockquote>
<blockquote>
<p>递增（++），递减（ – ）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">++num: 先自加，后返回值</span><br><span class="line">num++: 先返回原值，后自加</span><br><span class="line">递减（ -- ）同理</span><br></pre></td></tr></table></figure>
</li>
<li><p>比较（关系）运算符</p>
<blockquote>
<p>大于（&gt;）…等等那些</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意点</span></span><br><span class="line">= : 赋值，把右边给左边</span><br><span class="line">== : 判断，判断两边值是否相等（注意隐式转换）</span><br><span class="line">=== : 全等，判断两边值和数据类型是否完全相同</span><br></pre></td></tr></table></figure>
</li>
<li><p>逻辑运算符</p>
<blockquote>
<p>与（&amp;&amp;）或（||）非（！）</p>
</blockquote>
</li>
<li><p>… 更多查相关文档</p>
</li>
</ul>
<h5 id="1-4、流程控制"><a href="#1-4、流程控制" class="headerlink" title="1.4、流程控制"></a>1.4、流程控制</h5><ul>
<li><p>顺序：代码自上而下，顺序执行</p>
</li>
<li><p>分支：条件判断</p>
<blockquote>
<p>if else …等等那些</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类比 三元运算符</span></span><br><span class="line">表达式<span class="number">1</span> ? 表达式<span class="number">2</span> : 表达式<span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>switch</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>( 表达式 )&#123; </span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// 表达式 等于 value1 时要执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// 表达式 等于 value2 时要执行的代码</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 表达式 不等于任何一个 value 时要执行的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关键字 switch 后面括号内可以是表达式或值，通常是一个变量</span></span><br><span class="line"><span class="comment"> * 关键字 case, 后跟一个选项的表达式或值，后面跟一个冒号</span></span><br><span class="line"><span class="comment"> * switch 表达式的值会与结构中的 case 的值做比较</span></span><br><span class="line"><span class="comment"> * 如果存在匹配全等(===)，则与该 case 关联的代码块会被执行，并在遇到 break 时停止，整个 switch 语句代码执行结束</span></span><br><span class="line"><span class="comment"> * 如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码</span></span><br><span class="line"><span class="comment"> * 注意: 执行 case 里面的语句时，如果没有 break，则继续执行下一个 case 里面的语句。</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-5、循环"><a href="#1-5、循环" class="headerlink" title="1.5、循环"></a>1.5、循环</h5><blockquote>
<p>for 循环</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传统 for 循环，可多重循环</span></span><br><span class="line"><span class="keyword">for</span>(初始化变量; 条件表达式; 操作表达式 )&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>while 和 do-while 循环</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先判断，再执行循环体</span></span><br><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    <span class="comment">// 循环体代码 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先执行循环体，再判断</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>continue：立即跳出本次循环，继续下一次循环（循环继续）</p>
<p>break：立即跳出整个循环（循环结束）</p>
</blockquote>
<h5 id="1-6、数组"><a href="#1-6、数组" class="headerlink" title="1.6、数组"></a>1.6、数组</h5><ul>
<li><p>创建数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式 1</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并初始化（值类型可任意）</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = [<span class="string">&#x27;小白&#x27;</span>,<span class="string">&#x27;小黑&#x27;</span>,<span class="string">&#x27;大黄&#x27;</span>,<span class="string">&#x27;瑞奇&#x27;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>索引 （下标）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">概念: 用来访问数组元素的序号，从 <span class="number">0</span> 开始</span><br><span class="line">作用: 通过索引来访问、设置、修改对应的数组元素</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数组</span></span><br><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 获取数组中的第 2 个元素, 如果没有则值是 undefined</span></span><br><span class="line">alert(arrStus[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 形式: for 循环</span></span><br><span class="line"><span class="comment"> * 数组的长度: arr.length</span></span><br><span class="line"><span class="comment"> * 数组的元素个数 = 数组的长度 - 1</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arrStus[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于数组的长度，在数组的末尾插入新元素</span></span><br><span class="line">数组[ 数组.length ] = 新数据;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="1-7、函数"><a href="#1-7、函数" class="headerlink" title="1.7、函数"></a>1.7、函数</h5><ul>
<li><p>声明与调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数, 方式 1 - 命名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明函数, 方式 2 - 匿名函数</span></span><br><span class="line"><span class="keyword">var</span> fn(函数名) = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名();</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数</p>
<blockquote>
<p>形参：形式上的参数, 当前并不知道是什么</p>
</blockquote>
<blockquote>
<p>实参：实际上的参数, 当前知道是什么</p>
</blockquote>
<blockquote>
<p>关系：实参 传递给 形参, 函数被调用的时候传递</p>
</blockquote>
<blockquote>
<p>数量：均可多个, 一般实参的数量对应形参的数量</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实参个数 &gt; 形参个数: 只取到形参的个数</span></span><br><span class="line"><span class="comment"> * 实参个数 &lt; 形参个数: 多出的定义为 undefined, 结果为 NaN</span></span><br><span class="line"><span class="comment"> * arguments</span></span><br><span class="line"><span class="comment"> * 作用: 当不确定有多少个参数传递的时候，可以用 arguments 来获取</span></span><br><span class="line"><span class="comment"> * 身份: 当前函数的一个内置对象</span></span><br><span class="line"><span class="comment"> * 形式: 伪数组, 可遍历</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回值</p>
<blockquote>
<p>概念：函数调用整体代表的数据</p>
</blockquote>
<blockquote>
<p>形式：return  需要返回的值;</p>
</blockquote>
<blockquote>
<p>说明：执行了 return  语句, 函数会停止执行，并返回指定的值</p>
</blockquote>
<blockquote>
<p>有无：可有可无, 如果函数没有 return ，返回的值是 undefined</p>
</blockquote>
</li>
</ul>
<h5 id="1-8、对象"><a href="#1-8、对象" class="headerlink" title="1.8、对象"></a>1.8、对象</h5><blockquote>
<p>具体看另一份笔记</p>
</blockquote>
<h5 id="1-9、作用域"><a href="#1-9、作用域" class="headerlink" title="1.9、作用域"></a>1.9、作用域</h5><ul>
<li><p>全局作用域</p>
<blockquote>
<p>作用于所有代码执行的环境(整个 script 标签内部)或者一个独立的 js 文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量</span></span><br><span class="line">在全局作用域下声明的变量叫做全局变量（在函数外部定义的变量）</span><br></pre></td></tr></table></figure>
</li>
<li><p>局部作用域</p>
<blockquote>
<p>作用于函数内的代码环境，就是局部作用域。 因为跟函数有关系，所以也称为函数作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 局部变量</span></span><br><span class="line">在局部作用域下声明的变量叫做局部变量（在函数内部定义的变量）</span><br></pre></td></tr></table></figure>
</li>
<li><p>作用域链</p>
</li>
</ul>
<h4 id="2、Web-API"><a href="#2、Web-API" class="headerlink" title="2、Web API"></a>2、Web API</h4><h5 id="2-1、获取元素"><a href="#2-1、获取元素" class="headerlink" title="2.1、获取元素"></a>2.1、获取元素</h5><ul>
<li><p>根据 ID  获取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法: document.getElementById(id)</span></span><br><span class="line"><span class="comment"> * 作用: 根据 ID 获取元素对象</span></span><br><span class="line"><span class="comment"> * 参数: id 值，区分大小写的字符串</span></span><br><span class="line"><span class="comment"> * 返回值: 元素对象 或 null</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;time&quot;</span>&gt;<span class="number">2020</span><span class="number">-9</span><span class="number">-9</span>&lt;/div&gt;</span><br><span class="line">    <span class="comment">// 先得有标签，所以 script 写到标签结构的下面（最后面）</span></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;time&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(timer);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer);</span><br><span class="line">        <span class="comment">// console.dir 打印返回的元素对象，更好的查看里面的属性和方法</span></span><br><span class="line">        <span class="built_in">console</span>.dir(timer);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据 标签名 获取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法 1 : document.getElementsByTagName(&#x27;标签名&#x27;) </span></span><br><span class="line"><span class="comment"> * 语法 2 : element.getElementsByTagName(&#x27;标签名&#x27;)</span></span><br><span class="line"><span class="comment"> * 作用: 根据标签名获取元素对象</span></span><br><span class="line"><span class="comment"> * 参数: 标签名</span></span><br><span class="line"><span class="comment"> * 返回值: 元素对象集合（伪数组，数组元素是元素对象）</span></span><br><span class="line"><span class="comment"> * 注意: 获取到是动态集合，即: 当页面增加了标签，这个集合中也就增加了元素</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="number">11</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="number">22</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="number">33</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="number">44</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，应是等你好久<span class="number">55</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ul id=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;生僻字&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. 返回的是: 获取过来元素对象的集合，以伪数组的形式存储的</span></span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(lis);</span><br><span class="line">        <span class="built_in">console</span>.log(lis[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 2. 想要依次打印里面的元素对象，可以采取遍历的方式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(lis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. element.getElementsByTagName(): 可以得到这个元素里面的某些标签</span></span><br><span class="line">        <span class="comment">// 先获取外层，逐层获取</span></span><br><span class="line">        <span class="keyword">var</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;nav&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> navLis = nav.getElementsByTagName(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(navLis);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>H5 新增获取方式（注意兼容性）</p>
<blockquote>
<p>根据 类名 获取</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法: document.getElementsByClassName(&#x27;类名&#x27;) </span></span><br><span class="line"><span class="comment"> * 作用: 根据类名获取元素对象</span></span><br><span class="line"><span class="comment"> * 参数: 类名</span></span><br><span class="line"><span class="comment"> * 返回值: 元素对象集合（伪数组，数组元素是元素对象）</span></span><br><span class="line"><span class="comment"> * 注意: 获取到是动态集合，即: 当页面增加了标签，这个集合中也就增加了元素</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据 选择器 获取</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法: document.querySelector(&#x27;选择器&#x27;) </span></span><br><span class="line"><span class="comment"> * 作用: 根据选择器获取第一个元素对象</span></span><br><span class="line"><span class="comment"> * 参数: 选择器</span></span><br><span class="line"><span class="comment"> * 返回值: 指定选择器的第一个元素对象</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法: document.querySelectorAll(&#x27;选择器&#x27;) </span></span><br><span class="line"><span class="comment"> * 作用: 根据选择器获取所有元素对象</span></span><br><span class="line"><span class="comment"> * 参数: 选择器</span></span><br><span class="line"><span class="comment"> * 返回值: 指定选择器的所有元素对象集合</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;盒子<span class="number">1</span>&lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;盒子<span class="number">2</span>&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;nav&quot;</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;首页&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;产品&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span><br><span class="line">        <span class="keyword">var</span> boxs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;box&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(boxs);</span><br><span class="line">        <span class="comment">// 2. querySelector: 返回指定选择器的第一个元素对象，切记: 里面的选择器需要加符号 .box  #nav</span></span><br><span class="line">        <span class="keyword">var</span> firstBox = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(firstBox);</span><br><span class="line">        <span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#nav&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(nav);</span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(li);</span><br><span class="line">        <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span><br><span class="line">        <span class="keyword">var</span> allBox = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(allBox);</span><br><span class="line">        <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(lis);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取特殊元素</p>
<blockquote>
<p>body：document.body</p>
<p>html：document.documentElement</p>
</blockquote>
</li>
</ul>
<h5 id="2-2、事件"><a href="#2-2、事件" class="headerlink" title="2.2、事件"></a>2.2、事件</h5><ul>
<li><p>三要素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件源（谁）: 触发事件的元素 </span></span><br><span class="line"><span class="comment"> * 事件类型（什么事件）: 例如 click 点击事件</span></span><br><span class="line"><span class="comment"> * 参数: 类名</span></span><br><span class="line"><span class="comment"> * 事件处理程序（做啥）: 事件触发后要执行的代码(函数形式)，事件处理函数</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;唐伯虎&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 执行事件步骤</span></span><br><span class="line">        <span class="comment">//(1) 获取事件源: 例如按钮</span></span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">        <span class="comment">//(2) 绑定/注册事件类型: 例如鼠标点击(onclick)</span></span><br><span class="line">        <span class="comment">//(3) 添加事件处理程序: 函数体</span></span><br><span class="line">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;点秋香&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>事件注册的两种方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、传统注册方式 </span></span><br><span class="line"><span class="comment"> * 特点: 注册事件的唯一性</span></span><br><span class="line"><span class="comment"> * 注意: 同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数会覆盖前面注册的处理函数</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、监听注册方式 </span></span><br><span class="line"><span class="comment"> * 方法 1 : addEventListener()</span></span><br><span class="line"><span class="comment"> * 参数: </span></span><br><span class="line"><span class="comment"> *      (1)、事件类型字符串，如: click</span></span><br><span class="line"><span class="comment"> *     (2)、事件处理函数</span></span><br><span class="line"><span class="comment"> *   (3)、布尔值，可选，true: 事件捕获阶段调用，false: 事件冒泡阶段调用</span></span><br><span class="line"><span class="comment"> * 特点: 同一个元素同一个事件可以注册多个监听器</span></span><br><span class="line"><span class="comment"> * 注意: 按注册顺序依次执行, IE9 以后</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方法 2 : attacheEvent()</span></span><br><span class="line"><span class="comment"> * 参数: </span></span><br><span class="line"><span class="comment"> *      (1)、事件类型字符串，如: click</span></span><br><span class="line"><span class="comment"> *     (2)、事件处理函数（回调函数）</span></span><br><span class="line"><span class="comment"> * 特点: 同一个元素同一个事件可以注册多个监听器</span></span><br><span class="line"><span class="comment"> * 注意: 按注册顺序依次执行, IE9 以前</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;传统注册事件&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;方法监听注册事件&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;ie9 attachEvent&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="comment">// 1. 传统方式注册事件</span></span><br><span class="line">        btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">&#x27;hao a u&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">// 2. 事件侦听注册事件 addEventListener </span></span><br><span class="line">         <span class="comment">// (1) 里面的事件类型是字符串 必定加引号 而且不带 on</span></span><br><span class="line">         <span class="comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span></span><br><span class="line">        <span class="comment">// 注意: 此处 处理函数 一般写具名函数，而不是下面的匿名函数，便于事件删除操作</span></span><br><span class="line">        btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="number">22</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        btns[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">33</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="comment">// 3. attachEvent ie9 以前的版本支持</span></span><br><span class="line">        btns[<span class="number">2</span>].attachEvent(<span class="string">&#x27;onclick&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="number">11</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除（解绑）事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、传统注册事件的删除</span></span><br><span class="line"><span class="comment"> * 形式: 事件源.事件名 = null;</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、监听注册事件的删除</span></span><br><span class="line"><span class="comment"> * 方法 1 : removeEventListener()</span></span><br><span class="line"><span class="comment"> * 参数: 同上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 方法 2 : detachEvent()</span></span><br><span class="line"><span class="comment"> * 参数: 同上</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;<span class="number">2</span>&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;<span class="number">3</span>&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        divs[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">11</span>);</span><br><span class="line">                <span class="comment">// 1. 传统方式删除事件</span></span><br><span class="line">                divs[<span class="number">0</span>].onclick = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2. removeEventListener 删除事件</span></span><br><span class="line">        divs[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, fn) <span class="comment">// 里面的fn 不需要调用加小括号</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="number">22</span>);</span><br><span class="line">            divs[<span class="number">1</span>].removeEventListener(<span class="string">&#x27;click&#x27;</span>, fn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3. detachEvent</span></span><br><span class="line">        divs[<span class="number">2</span>].attachEvent(<span class="string">&#x27;onclick&#x27;</span>, fn1);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="number">33</span>);</span><br><span class="line">            divs[<span class="number">2</span>].detachEvent(<span class="string">&#x27;onclick&#x27;</span>, fn1);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>DOM 事件流</p>
<p>概念：事件发生时会在元素节点之间按照特定的顺序传播</p>
<blockquote>
<p>事件流的三个阶段</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824203205.png"></p>
<p>捕获阶段：由外往内，逐层响应（应用较少）</p>
<p>事件冒泡：由内往外，逐层响应（应用较多）</p>
<p>冒泡情况：有冒泡的事件，给父子嵌套的父盒子绑定该事件的时候，由于冒泡，父盒子绑定的事件被执行了两                    次</p>
<blockquote>
<p>注意事项：</p>
<p>（1）、JS 代码中只能执行捕获或者冒泡其中的一个阶段；</p>
<p>（2）、onClick 和 attachEvent 只能得到冒泡阶段；</p>
<p>（3）、部分事件没有冒泡，如：onblur、onfocus、onmouseenter、onmouseleave</p>
</blockquote>
</li>
<li><p>事件对象</p>
<p>概念：事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意事项</span></span><br><span class="line"><span class="comment"> * 1. event 就是一个事件对象，写到我们侦听函数的，小括号里面，当形参来看</span></span><br><span class="line"><span class="comment"> * 2. 事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</span></span><br><span class="line"><span class="comment"> * 3. 这个事件对象我们可以自己命名 比如 event 、 evt、 e</span></span><br><span class="line"><span class="comment"> * 4. 有兼容性问题，ie678 通过 window.event 兼容性的写法: e = e || window.event;</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;<span class="number">123</span>&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        div.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// console.log(e);</span></span><br><span class="line">                <span class="comment">// console.log(window.event);</span></span><br><span class="line">                <span class="comment">// e = e || window.event;</span></span><br><span class="line">                <span class="built_in">console</span>.log(e);</span><br><span class="line">            &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常见属性和方法</span></span><br><span class="line"><span class="comment"> * 1. e.target</span></span><br><span class="line"><span class="comment"> * 返回值: 触发事件的对象（元素）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 2. e.preventDefault()</span></span><br><span class="line"><span class="comment"> * 作用: 阻止默认事件，比如不让链接跳转, IE9 以上</span></span><br><span class="line"><span class="comment"> * 兼容: ie678: e.returnValue = false;</span></span><br><span class="line"><span class="comment"> * 无兼容问题写法: return false;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 3、e.stopPropagation()</span></span><br><span class="line"><span class="comment"> * 作用: 阻止冒泡, IE9 以上</span></span><br><span class="line"><span class="comment"> * 兼容: ie678: e.event.cancelBubble = true;</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>事件委托（代理、委派）</p>
<p>原理：给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素</p>
<p>表述：<strong>不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</strong></p>
<p>作用：减少 DOM 操作次数，提高程序性能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给 ul 注册点击事件，然后利用事件对象的 e.target 来找到当前点击的 li，因为点击 li，事件会冒泡到 ul 上，ul 有注册事件，就会触发事件监听器</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;知否知否，点我应有弹框在手！&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 事件委托的核心原理：给父节点添加侦听器， 利用事件冒泡影响每一个子节点</span></span><br><span class="line">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">        ul.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// alert(&#x27;知否知否，点我应有弹框在手！&#x27;);</span></span><br><span class="line">            <span class="comment">// e.target 这个可以得到我们点击的对象</span></span><br><span class="line">            e.target.style.backgroundColor = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 注意: e.target 和 this 的区别</span></span><br><span class="line"><span class="comment">         * e.target: 触发事件的对象（元素），点击的是 li，故是 li 元素</span></span><br><span class="line"><span class="comment">         * this: 指向事件源，绑定点击事件的是 ul，故是获取到的 ul </span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mouseenter 和mouseover 的区别</p>
<blockquote>
<p>当鼠标移动到元素上时就会触发 mouseenter 事件，mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发，mouseenter  只会经过自身盒子触发</p>
</blockquote>
<blockquote>
<p>原因：mouseenter 不会冒泡</p>
</blockquote>
<blockquote>
<p>注意：跟 mouseenter 搭配，鼠标离开 mouseleave  同样不会冒泡</p>
</blockquote>
</li>
</ul>
<h5 id="2-3、操作元素"><a href="#2-3、操作元素" class="headerlink" title="2.3、操作元素"></a>2.3、操作元素</h5><ul>
<li><p>改变元素内容（获取或设置）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 1 : element.innerText </span></span><br><span class="line"><span class="comment"> * 范围: 从起始位置到终止位置的内容</span></span><br><span class="line"><span class="comment"> * 特点: 去除 HTML 标签，空格 和 换行</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 2 : element.innerHTML</span></span><br><span class="line"><span class="comment"> * 范围: 从起始位置到终止位置的全部内容</span></span><br><span class="line"><span class="comment"> * 特点: 包括 HTML 标签，空格 和 换行</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;显示当前系统时间&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;某个时间&lt;/div&gt;</span><br><span class="line">    &lt;p&gt;<span class="number">1123</span>&lt;/p&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 点击了按钮，div里面的文字会发生变化</span></span><br><span class="line">        <span class="comment">// 1. 获取元素 </span></span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="comment">// 2. 注册事件</span></span><br><span class="line">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// div.innerText = &#x27;2020-6-6&#x27;;</span></span><br><span class="line">            div.innerHTML = getDate();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> year = date.getFullYear();</span><br><span class="line">            <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">var</span> dates = date.getDate();</span><br><span class="line">            <span class="keyword">var</span> arr = [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>];</span><br><span class="line">            <span class="keyword">var</span> day = date.getDay();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;今天是：&#x27;</span> + year + <span class="string">&#x27;年&#x27;</span> + month + <span class="string">&#x27;月&#x27;</span> + dates + <span class="string">&#x27;日 &#x27;</span> + arr[day];</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作属性</p>
<blockquote>
<p>获取属性的值：元素对象.属性名</p>
<p>设置属性的值：元素对象.属性名 = 值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 常见操作属性</span></span><br><span class="line"><span class="comment"> * src、href、id、alt、title</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;ldh&quot;</span>&gt;刘德华&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;zxy&quot;</span>&gt;张学友&lt;/button&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">    &lt;img src=&quot;images/ldh.jpg&quot; alt=&quot;&quot; title=&quot;刘德华&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 例如: 修改元素属性: src</span><br><span class="line">        // 1. 获取元素</span><br><span class="line">        var ldh = document.getElementById(&#x27;ldh&#x27;);</span><br><span class="line">        var zxy = document.getElementById(&#x27;zxy&#x27;);</span><br><span class="line">        var img = document.querySelector(&#x27;img&#x27;);</span><br><span class="line">        // 2. 注册事件, 处理程序</span><br><span class="line">        zxy.onclick = function() &#123;</span><br><span class="line">            img.src = &#x27;images/zxy.jpg&#x27;;</span><br><span class="line">            img.title = &#x27;张学友思密达&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        ldh.onclick = function() &#123;</span><br><span class="line">            img.src = &#x27;images/ldh.jpg&#x27;;</span><br><span class="line">            img.title = &#x27;刘德华&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">/**</span></span><br><span class="line"><span class="xml"> * 常见表单操作属性</span></span><br><span class="line"><span class="xml"> * type、value、checked、selected、disabled</span></span><br><span class="line"><span class="xml"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; value=&quot;输入内容&quot;&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 1. 获取元素</span><br><span class="line">        var btn = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">        var input = document.querySelector(&#x27;input&#x27;);</span><br><span class="line">        // 2. 注册事件 处理程序</span><br><span class="line">        btn.onclick = function() &#123;</span><br><span class="line">            // 表单里面的值，文字内容是通过 value 来修改的</span><br><span class="line">            input.value = &#x27;被点击了&#x27;;</span><br><span class="line">            // 如果想要某个表单被禁用，不能再点击: disabled = true</span><br><span class="line">            // btn.disabled = true;</span><br><span class="line">            this.disabled = true;</span><br><span class="line">            // this 指向的是事件函数的调用者 btn</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 常见样式属性</span><br><span class="line"> * style: 行内样式, 权重较高, 样式较少或者功能简单的情况下使用</span><br><span class="line"> * 方式: 元素对象.style.样式属性 = 值;</span><br><span class="line"> * className: 类名样式, 样式较多或者功能复杂的情况</span><br><span class="line"> * 方式: 元素对象.className = 值;</span><br><span class="line"> **/</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 1. 获取元素</span><br><span class="line">        var div = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">        // 2. 注册事件 处理程序</span><br><span class="line">        div.onclick = function() &#123;</span><br><span class="line">            // div.style 里面的属性，采取驼峰命名法 </span><br><span class="line">            this.style.backgroundColor = &#x27;purple&#x27;;</span><br><span class="line">            this.style.width = &#x27;250px&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;first&quot;&gt;文本&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        var test = document.querySelector(&#x27;div&#x27;);</span><br><span class="line">        test.onclick = function() &#123;</span><br><span class="line">            // this.className = &#x27;change&#x27;;</span><br><span class="line">            this.className = &#x27;first change&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义属性的操作</p>
<blockquote>
<p>目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中</p>
</blockquote>
<blockquote>
<p>获取属性值：element.属性，元素本身自带的属性</p>
<p>获取属性值：element.getAttribute(‘属性’)，自定义属性</p>
<p>设置元素属性值：element.属性= ‘值’，元素本身自带的属性</p>
<p>设置元素属性值：element.setAttribute(‘属性’, ‘值’)，自定义属性</p>
<p>移除属性：removeAttribute(‘属性’)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;demo&quot;</span> index=<span class="string">&quot;1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;nav&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="comment">// 1. 获取元素的属性值</span></span><br><span class="line">        <span class="comment">// (1) element.属性</span></span><br><span class="line">        <span class="built_in">console</span>.log(div.id);</span><br><span class="line">        <span class="comment">// (2) element.getAttribute(&#x27;属性&#x27;) </span></span><br><span class="line">        <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;id&#x27;</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;index&#x27;</span>));</span><br><span class="line">        <span class="comment">// 2. 设置元素属性值</span></span><br><span class="line">        <span class="comment">// (1) element.属性= &#x27;值&#x27;</span></span><br><span class="line">        div.id = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">        div.className = <span class="string">&#x27;navs&#x27;</span>;</span><br><span class="line">        <span class="comment">// (2) element.setAttribute(&#x27;属性&#x27;, &#x27;值&#x27;);</span></span><br><span class="line">        div.setAttribute(<span class="string">&#x27;index&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// class 特殊，这里面写的就是 class，不是 className</span></span><br><span class="line">        div.setAttribute(<span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>); </span><br><span class="line">        <span class="comment">// 3 移除属性 removeAttribute(属性)    </span></span><br><span class="line">        div.removeAttribute(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>H5 自定义属性</p>
<blockquote>
<p>方式：data- 开头作为属性名并赋值，例如：data-index=”1”</p>
<p>目的：为了区分该属性是内置属性还是自定义属性，data- 开头为自定义属性，否则为内置属性</p>
</blockquote>
<blockquote>
<p>获取 H5 自定义属性：element.getAttribute(‘data-属性’)，兼容获取</p>
<p>获取 H5 自定义属性：element.dataset.属性 or element.dataset[‘属性’]，IE 11 版本以上</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div getTime=<span class="string">&quot;20&quot;</span> data-index=<span class="string">&quot;2&quot;</span> data-list-name=<span class="string">&quot;andy&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;getTime&#x27;</span>));</span><br><span class="line">        div.setAttribute(<span class="string">&#x27;data-time&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-index&#x27;</span>));</span><br><span class="line">        <span class="built_in">console</span>.log(div.getAttribute(<span class="string">&#x27;data-list-name&#x27;</span>));</span><br><span class="line">        <span class="comment">// h5新增的获取自定义属性的方法 它只能获取data-开头的</span></span><br><span class="line">        <span class="comment">// dataset 是一个集合里面存放了所有以data开头的自定义属性</span></span><br><span class="line">        <span class="built_in">console</span>.log(div.dataset);</span><br><span class="line">        <span class="built_in">console</span>.log(div.dataset.index);</span><br><span class="line">        <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;index&#x27;</span>]);</span><br><span class="line">        <span class="comment">// 如果自定义属性里面有多个-链接的单词，获取的时候采取 驼峰命名法</span></span><br><span class="line">        <span class="built_in">console</span>.log(div.dataset.listName);</span><br><span class="line">        <span class="built_in">console</span>.log(div.dataset[<span class="string">&#x27;listName&#x27;</span>]);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="2-4、节点操作"><a href="#2-4、节点操作" class="headerlink" title="2.4、节点操作"></a>2.4、节点操作</h5><blockquote>
<p>目的：使 DOM 元素的操作变得更简单，逻辑性更强</p>
</blockquote>
<ul>
<li><p>父子关系</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 父节点: parentNode</span></span><br><span class="line"><span class="comment"> * 注意: 最近的一个父节点(亲爸爸)，如果指定的节点没有父节点则返回 NULL</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;erweima&quot;</span>&gt;×&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 父节点 parentNode</span></span><br><span class="line">        <span class="keyword">var</span> erweima = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.erweima&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(erweima.parentNode);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有子节点: childNodes、children（常用）</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;我是li&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;我是li&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. 子节点: childNodes，所有的子节点包含: 元素节点、文本节点等等</span></span><br><span class="line">        <span class="built_in">console</span>.log(ul.childNodes);</span><br><span class="line">        <span class="built_in">console</span>.log(ul.childNodes[<span class="number">0</span>].nodeType);</span><br><span class="line">        <span class="built_in">console</span>.log(ul.childNodes[<span class="number">1</span>].nodeType);</span><br><span class="line">        <span class="comment">// 2. children: 获取所有的子元素节点，也是实际开发常用的，兼容</span></span><br><span class="line">        <span class="built_in">console</span>.log(ul.children);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一个子节点: firstChild，所有</span></span><br><span class="line"><span class="comment"> * 最后一个子节点: lastChild，所有</span></span><br><span class="line"><span class="comment"> * 第一个子元素节点: firstElementChild，第一个子元素</span></span><br><span class="line"><span class="comment"> * 最后一个子元素节点: lastElementChild，最后一个子元素</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ol&gt;</span><br><span class="line">        &lt;li&gt;我是li1&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li2&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li3&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li4&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;我是li5&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> ol = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ol&#x27;</span>);</span><br><span class="line">        <span class="comment">// 1. firstChild 第一个子节点，不管是文本节点还是元素节点都有</span></span><br><span class="line">        <span class="built_in">console</span>.log(ol.firstChild);</span><br><span class="line">        <span class="built_in">console</span>.log(ol.lastChild);</span><br><span class="line">        <span class="comment">// 2. firstElementChild，返回第一个子元素节点，ie9 才支持</span></span><br><span class="line">        <span class="built_in">console</span>.log(ol.firstElementChild);</span><br><span class="line">        <span class="built_in">console</span>.log(ol.lastElementChild);</span><br><span class="line">        <span class="comment">// 3. 实际开发的写法，既没有兼容性问题又返回第一个子元素</span></span><br><span class="line">        <span class="built_in">console</span>.log(ol.children[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">console</span>.log(ol.children[ol.children.length - <span class="number">1</span>]);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>兄弟/姐妹关系</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nextSibling、previousSibling - 所有</span></span><br><span class="line"><span class="comment"> * nextElementSibling、previousElementSibling - 元素</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;我是div&lt;/div&gt;</span><br><span class="line">    &lt;span&gt;我是span&lt;/span&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="comment">// 1. nextSibling 下一个兄弟节点 包含元素节点或者 文本节点等等</span></span><br><span class="line">        <span class="built_in">console</span>.log(div.nextSibling);</span><br><span class="line">        <span class="built_in">console</span>.log(div.previousSibling);</span><br><span class="line">        <span class="comment">// 2. nextElementSibling 得到下一个兄弟元素节点</span></span><br><span class="line">        <span class="built_in">console</span>.log(div.nextElementSibling);</span><br><span class="line">        <span class="built_in">console</span>.log(div.previousElementSibling);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建节点 和 添加节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建节点</span></span><br><span class="line"><span class="comment"> * 方式: document.createElement(&#x27;tagName&#x27;)</span></span><br><span class="line"><span class="comment"> * 说明: 创建由 tagName 指定的 HTML 元素，原先不存在，是根据需求动态生成的</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加节点</span></span><br><span class="line"><span class="comment"> * 方式 1 : node.appendChild(child)</span></span><br><span class="line"><span class="comment"> * 说明: node: 父级, child: 子级，将一个节点添加到指定父节点的子节点列表的末尾</span></span><br><span class="line"><span class="comment"> * 方式 2 : node.insertBefore(child, 指定元素)</span></span><br><span class="line"><span class="comment"> * 说明: node: 父级, child: 子级，将一个节点添加到父节点的指定子节点的前面</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">123</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. 创建元素节点</span></span><br><span class="line">        <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        <span class="comment">// 2. 添加节点 node.appendChild(child)</span></span><br><span class="line">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">        ul.appendChild(li);</span><br><span class="line">        <span class="comment">// 3. 添加节点 node.insertBefore(child, 指定子节点元素);</span></span><br><span class="line">        <span class="keyword">var</span> lili = <span class="built_in">document</span>.createElement(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        ul.insertBefore(lili, ul.children[<span class="number">0</span>]);</span><br><span class="line">        <span class="comment">// 4. 想要页面添加一个新的元素 ： 1. 创建元素 2. 添加元素</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * node.removeChild()</span></span><br><span class="line"><span class="comment"> * 作用: 从 DOM 节点中删除一个子节点</span></span><br><span class="line"><span class="comment"> * 返回: 删除的节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;熊大&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;熊二&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;光头强&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1.获取元素</span></span><br><span class="line">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="comment">// 2. 删除元素  node.removeChild(child)</span></span><br><span class="line">        <span class="comment">// ul.removeChild(ul.children[0]);</span></span><br><span class="line">        <span class="comment">// 3. 点击按钮依次删除里面的孩子</span></span><br><span class="line">        btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ul.children.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.disabled = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ul.removeChild(ul.children[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * node.cloneNode()</span></span><br><span class="line"><span class="comment"> * 参数: 空或者 false，浅拷贝即: 只复制标签不复制里面的内容，true，深拷贝</span></span><br><span class="line"><span class="comment"> * 返回: 克隆节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">1111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">2</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">3</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">        <span class="comment">// 1. node.cloneNode();</span></span><br><span class="line">        <span class="comment">// 2. node.cloneNode(true);</span></span><br><span class="line">        <span class="keyword">var</span> lili = ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span><br><span class="line">        ul.appendChild(lili);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>三种创建元素的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 1 : document.write()</span></span><br><span class="line"><span class="comment"> * 说明: 如果页面文档流加载完毕，再调用这句话会导致页面重绘</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 2 : element.innerHTML</span></span><br><span class="line"><span class="comment"> * 说明: 将内容写入某个 DOM 节点，不会导致页面全部重绘</span></span><br><span class="line"><span class="comment"> * 效率: 效率更高（不要拼接字符串，采取数组形式拼接）</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方式 3 : document.createElement()</span></span><br><span class="line"><span class="comment"> * 说明: 创建元素</span></span><br><span class="line"><span class="comment"> * 效率: 稍微低一点点，但结构清晰</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;点击&lt;/button&gt;</span><br><span class="line">    &lt;p&gt;abc&lt;/p&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;inner&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;create&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 三种创建元素方式区别 </span></span><br><span class="line">        <span class="comment">// 1. document.write() 创建元素  如果页面文档流加载完毕，再调用这句话会导致页面重绘</span></span><br><span class="line">        <span class="comment">// var btn = document.querySelector(&#x27;button&#x27;);</span></span><br><span class="line">        <span class="comment">// btn.onclick = function() &#123;</span></span><br><span class="line">        <span class="comment">//     document.write(&#x27;&lt;div&gt;123&lt;/div&gt;&#x27;);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. innerHTML 创建元素</span></span><br><span class="line">        <span class="keyword">var</span> inner = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.inner&#x27;</span>);</span><br><span class="line">        <span class="comment">// for (var i = 0; i &lt;= 100; i++) &#123;</span></span><br><span class="line">               <span class="comment">// 拼接字符串的方式效率低    </span></span><br><span class="line">        <span class="comment">//     inner.innerHTML += &#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// 数组形式拼接，效率高</span></span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            arr.push(<span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        inner.innerHTML = arr.join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// 3. document.createElement() 创建元素</span></span><br><span class="line">        <span class="keyword">var</span> create = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.create&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            create.appendChild(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h5 id="2-5、算法思想"><a href="#2-5、算法思想" class="headerlink" title="2.5、算法思想"></a>2.5、算法思想</h5><ul>
<li><p>排它思想算法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适用: 如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法</span></span><br><span class="line"><span class="comment"> * 步骤: </span></span><br><span class="line"><span class="comment"> * 1、所有元素全部清除样式（干掉其他人）</span></span><br><span class="line"><span class="comment"> * 2、给当前元素设置样式 （留下我自己）</span></span><br><span class="line"><span class="comment"> * 注意: 注意顺序不能颠倒，首先干掉其他人，再设置自己</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">4</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">5</span>&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. 获取所有按钮元素</span></span><br><span class="line">        <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="comment">// btns 得到的是伪数组，里面的每一个元素 btns[i]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">            btns[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// (1) 我们先把所有的按钮背景颜色去掉: 干掉所有人</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span><br><span class="line">                    btns[i].style.backgroundColor = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// (2) 然后才让当前的元素背景颜色为pink: 留下我自己</span></span><br><span class="line">                <span class="built_in">this</span>.style.backgroundColor = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 首先先排除其他人，然后才设置自己的样式，这种排除其他人的思想我们成为排他思想</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="2-6、顶级对象"><a href="#2-6、顶级对象" class="headerlink" title="2.6、顶级对象"></a>2.6、顶级对象</h5><blockquote>
<p>DOM：document</p>
<p>BOM：window</p>
</blockquote>
<h5 id="2-7、window-对象常见事件"><a href="#2-7、window-对象常见事件" class="headerlink" title="2.7、window 对象常见事件"></a>2.7、window 对象常见事件</h5><ul>
<li><p>页面（窗口）加载事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 形式 1 : window.onload = function() &#123;&#125;</span></span><br><span class="line"><span class="comment"> * 形式 2 : window.addEventListener(&quot;load&quot;, function() &#123;&#125;)</span></span><br><span class="line"><span class="comment"> * 说明: 窗口 (页面）加载事件，当文档内容完全加载完成会触发该事件, 就调用处理函数</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 形式 3 : window.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123;&#125;)</span></span><br><span class="line"><span class="comment"> * 说明: 窗口 (页面）加载事件，当文档内容不完全加载完成会触发该事件, 就调用处理函数</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// window.onload = function() &#123;</span></span><br><span class="line">        <span class="comment">//     var btn = document.querySelector(&#x27;button&#x27;);</span></span><br><span class="line">        <span class="comment">//     btn.addEventListener(&#x27;click&#x27;, function() &#123;</span></span><br><span class="line">        <span class="comment">//         alert(&#x27;点击我&#x27;);</span></span><br><span class="line">        <span class="comment">//     &#125;)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// window.onload = function() &#123;</span></span><br><span class="line">        <span class="comment">//     alert(22);</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">            btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="string">&#x27;点击我&#x27;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            alert(<span class="number">22</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="number">33</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等</span></span><br><span class="line">            <span class="comment">// DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调整窗口大小事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 形式 1 : window.onresize = function() &#123;&#125;</span></span><br><span class="line"><span class="comment"> * 形式 2 : window.addEventListener(&quot;resize&quot;, function() &#123;&#125;)</span></span><br><span class="line"><span class="comment"> * 说明: 调整窗口大小加载事件，当触发时就调用的处理函数</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;变化了&#x27;</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">window</span>.innerWidth &lt;= <span class="number">800</span>) &#123;</span><br><span class="line">                    div.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    div.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="2-8、定时器"><a href="#2-8、定时器" class="headerlink" title="2.8、定时器"></a>2.8、定时器</h5><p>回调函数：简单理解，就是过一会才会调用（回头再调用）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置: setTimeout(回调函数, [间隔的毫秒数]) </span></span><br><span class="line"><span class="comment"> * 执行次数: 一次</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 1. setTimeout </span></span><br><span class="line">        <span class="comment">// 语法规范: window.setTimeout(调用函数, 延时时间);</span></span><br><span class="line">        <span class="comment">// 1. 这个 window 在调用的时候可以省略</span></span><br><span class="line">        <span class="comment">// 2. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是 0</span></span><br><span class="line">        <span class="comment">// 3. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 &#x27;函数名()&#x27;</span></span><br><span class="line">        <span class="comment">// 4. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字)</span></span><br><span class="line">        <span class="comment">// setTimeout(function() &#123;</span></span><br><span class="line">        <span class="comment">//     console.log(&#x27;时间到了&#x27;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#125;, 2000);</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;爆炸了&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(callback, <span class="number">3000</span>);</span><br><span class="line">        <span class="keyword">var</span> timer2 = <span class="built_in">setTimeout</span>(callback, <span class="number">5000</span>);</span><br><span class="line">        <span class="comment">// setTimeout(&#x27;callback()&#x27;, 3000); // 我们不提倡这个写法</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 停止: clearTimeout(&#x27;定时器名称&#x27;)</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;点击停止定时器&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;爆炸了&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="number">5000</span>);</span><br><span class="line">        btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置: setInterval(回调函数, [间隔的毫秒数]) </span></span><br><span class="line"><span class="comment"> * 执行次数: 多次（反复）</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;继续输出&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 停止: clearInterval(&#x27;定时器名称&#x27;)</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;begin&quot;</span>&gt;开启定时器&lt;/button&gt;</span><br><span class="line">    &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;stop&quot;</span>&gt;停止定时器&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> begin = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.begin&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> stop = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.stop&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="literal">null</span>; <span class="comment">// 全局变量  null是一个空对象</span></span><br><span class="line">        begin.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;ni hao ma&#x27;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        stop.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-9、this"><a href="#2-9、this" class="headerlink" title="2.9、this"></a>2.9、this</h5><blockquote>
<p>指向问题</p>
</blockquote>
<blockquote>
<p>1、全局作用域或者普通函数中：this -&gt; window</p>
<p>2、定时器：this -&gt; window</p>
<p>3、方法调用中：this -&gt; 调用者</p>
<p>4、构造函数中：this -&gt; 构造函数的实例</p>
</blockquote>
<h5 id="2-10、location-对象"><a href="#2-10、location-对象" class="headerlink" title="2.10、location 对象"></a>2.10、location 对象</h5><p>作用：用于获取或设置窗体的 URL，并且可以解析 URL</p>
<p>主要属性：href（返回整个 URL）, search（返回参数）</p>
<p>常见方法</p>
<ul>
<li>页面跳转（重定向），可回退页面: location.assign(‘页面地址’)</li>
<li>页面跳转（重定向），不可回退页面: location.replace(‘页面地址’)</li>
<li>页面刷新: location.reload()，若带参数 true，则为强制刷新</li>
</ul>
<h5 id="2-11、navigator-对象"><a href="#2-11、navigator-对象" class="headerlink" title="2.11、navigator 对象"></a>2.11、navigator 对象</h5><p>作用：包含有关浏览器的信息，借此可以判断用户那个终端打开页面，实现跳转</p>
<p>最常用属性：userAgent，可以返回由客户机发送服务器的 user-agent 头部的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断用户那个终端打开页面，实现跳转</span></span><br><span class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;&quot;</span>;     <span class="comment">//手机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;&quot;</span>;     <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-12、元素偏移量-offset"><a href="#2-12、元素偏移量-offset" class="headerlink" title="2.12、元素偏移量 offset"></a>2.12、元素偏移量 offset</h5><ul>
<li><p>作用：<strong>动态</strong>的得到该元素的位置（偏移）、大小（宽度高度）等</p>
</li>
<li><p>注意：返回的数值都不带单位</p>
</li>
<li><p>常用属性</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824204307.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824204330.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;father&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;son&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;w&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// offset 系列</span></span><br><span class="line">        <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.father&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.son&#x27;</span>);</span><br><span class="line">        <span class="comment">// 1. 可以得到元素的偏移，位置，返回的不带单位的数值  </span></span><br><span class="line">        <span class="built_in">console</span>.log(father.offsetTop);</span><br><span class="line">        <span class="built_in">console</span>.log(father.offsetLeft);</span><br><span class="line">        <span class="comment">// 它以带有定位的父亲为准，如果没有父亲或者父亲没有定位，则以 body 为准</span></span><br><span class="line">        <span class="built_in">console</span>.log(son.offsetLeft);</span><br><span class="line">        <span class="keyword">var</span> w = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.w&#x27;</span>);</span><br><span class="line">        <span class="comment">// 2. 可以得到元素的大小，宽度和高度，是包含 padding + border + width </span></span><br><span class="line">        <span class="built_in">console</span>.log(w.offsetWidth);</span><br><span class="line">        <span class="built_in">console</span>.log(w.offsetHeight);</span><br><span class="line">        <span class="comment">// 3. 返回带有定位的父亲，否则返回的是 body</span></span><br><span class="line">        <span class="built_in">console</span>.log(son.offsetParent); <span class="comment">// 返回带有定位的父亲 否则返回的是body</span></span><br><span class="line">        <span class="built_in">console</span>.log(son.parentNode); <span class="comment">// 返回父亲，是最近一级的父亲: 亲爸爸，不管父亲有没有定位</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>offset 与 style 的区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * offset</span></span><br><span class="line"><span class="comment"> * 1、offset 可以得到任意样式表中的样式值</span></span><br><span class="line"><span class="comment"> * 2、offset 系列获得的数值是没有单位的</span></span><br><span class="line"><span class="comment"> * 3、offsetWidth 包含 padding+border+width</span></span><br><span class="line"><span class="comment"> * 4、offsetWidth 等属性是只读属性，只能获取不能赋值</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * style</span></span><br><span class="line"><span class="comment"> * 1、style 只能得到行内样式表中的样式值</span></span><br><span class="line"><span class="comment"> * 2、style.width 获得的是带有单位的字符串</span></span><br><span class="line"><span class="comment"> * 3、style.width 获得不包含 padding 和 border 的值</span></span><br><span class="line"><span class="comment"> * 4、style.width 是可读写属性，可以获取也可以赋值</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 总结: 想要获取元素大小位置，用 offset 更合适，想要给元素更改值，则需要用 style 改变</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="2-13、元素可视区-client"><a href="#2-13、元素可视区-client" class="headerlink" title="2.13、元素可视区 client"></a>2.13、元素可视区 client</h5><ul>
<li>作用：<strong>动态</strong>的得到该元素的边框大小、元素大小</li>
<li>注意：返回的数值都不带单位</li>
<li>常用属性</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824203946.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824204133.png"></p>
<h5 id="2-14、元素滚动-scroll"><a href="#2-14、元素滚动-scroll" class="headerlink" title="2.14、元素滚动 scroll"></a>2.14、元素滚动 scroll</h5><ul>
<li><p>作用：<strong>动态</strong>的得到该元素的大小、滚动距离</p>
</li>
<li><p>注意：返回的数值都不带单位，<strong>自身实际宽高</strong></p>
</li>
<li><p>常用属性</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824204207.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824203528.png"></p>
</li>
</ul>
<h5 id="2-15、offset、client-和-scroll-总结"><a href="#2-15、offset、client-和-scroll-总结" class="headerlink" title="2.15、offset、client 和 scroll 总结"></a>2.15、offset、client 和 scroll 总结</h5><blockquote>
<p>区分记忆技巧：offset -&gt; client  -&gt; scroll，宽高内容，逐个减少</p>
</blockquote>
<ul>
<li>offsetWidth / Height：内容区域的宽高 + padding + 边框</li>
<li>clientWidth / Height：内容区域的宽高 + padding</li>
<li>scrollWidth / Height：内容区域的宽高（内容自身实际）</li>
</ul>
<blockquote>
<p>应用记忆技巧：位置（offset）、大小（client）和 距离（scroll）</p>
</blockquote>
<ul>
<li><p>offsetLeft / top：常用于获取元素的位置</p>
</li>
<li><p>clientWidth / Height：常用于获取元素大小</p>
</li>
<li><p>scrollLeft / top：常用于获取滚动距离</p>
</li>
</ul>
<blockquote>
<p><strong>注意：页面滚动的距离通过 window.pageX（Y）Offset  获得，不要和元素的混淆</strong></p>
</blockquote>
<h5 id="2-16、动画函数封装"><a href="#2-16、动画函数封装" class="headerlink" title="2.16、动画函数封装"></a>2.16、动画函数封装</h5><p>Js 动画原理：通过定时器 setInterval() 不断移动盒子位置</p>
<p>动画实现步骤：</p>
<ul>
<li><p>获得盒子当前位置</p>
</li>
<li><p>让盒子在当前位置加上 1 个移动距离</p>
</li>
<li><p>核心原理：移动距离固定：匀速动画，移动距离不固定且按特定算法：缓动动画</p>
</li>
<li><p>利用定时器不断重复这个操作</p>
</li>
<li><p>加一个结束定时器的条件</p>
</li>
<li><p>注意此元素需要添加定位，才能使用element.style.left</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// js 动画原理</span></span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (div.offsetLeft &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">                <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">                <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 匀速动画为例子</span></span><br><span class="line">            div.style.left = div.offsetLeft + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;, <span class="number">30</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单封装</span></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 明确参数及功能</span></span><br><span class="line">        <span class="comment">// 简单动画函数封装obj目标对象 target 目标位置</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (obj.offsetLeft &gt;= target) &#123;</span><br><span class="line">                    <span class="comment">// 停止动画 本质是停止定时器</span></span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                &#125;</span><br><span class="line">                obj.style.left = obj.offsetLeft + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            &#125;, <span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> span = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">        <span class="comment">// 调用函数</span></span><br><span class="line">        animate(div, <span class="number">300</span>);</span><br><span class="line">        animate(span, <span class="number">200</span>);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="2-17、移动端"><a href="#2-17、移动端" class="headerlink" title="2.17、移动端"></a>2.17、移动端</h5><p>移动端特点：兼容性较好，不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果</p>
<ul>
<li><p>触屏事件：touch</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824203816.png"></p>
</li>
<li><p>触摸事件对象：TouchEvent</p>
<p><img src="https://cdn.jsdelivr.net/gh/HaoQiSpace/cdn/typora/20200824203853.png"></p>
<p>注意：touches 是同时触摸屏幕的手指数列表，targetTouches 是触摸 DOM 元素的手指数列表，但如果两者侦听的是同一个元素，那么结果是一模一样的，所以 targetTouches 用的多一些</p>
</li>
<li><p>拖动元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、touchstart、touchmove、touchend 可以实现拖动元素</span></span><br><span class="line"><span class="comment"> * 2、当前手指的坐标值: targetTouches[0] 里面的 pageX 和 pageY</span></span><br><span class="line"><span class="comment"> * 3、拖动元素三步曲:</span></span><br><span class="line"><span class="comment"> *    (1)、触摸元素 touchstart: 获取手指初始坐标（e.targetTouches[0].pageX / Y），同时获得盒子原来的位置（this.offsetLeft / Top）</span></span><br><span class="line"><span class="comment"> *    (2)、移动手指 touchmove: 计算手指的滑动距离（e.targetTouches[0].pageX / Y - 手指初始坐标），并且移动盒子，移动后盒子的位置: 盒子原来的位置 + 手指的滑动距离</span></span><br><span class="line"><span class="comment"> *    (3)、离开手指 touchend</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意: 手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault()</span></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// （1） 触摸元素 touchstart: 获取手指初始坐标，同时获得盒子原来的位置</span></span><br><span class="line">        <span class="comment">// （2） 移动手指 touchmove: 计算手指的滑动距离，并且移动盒子</span></span><br><span class="line">        <span class="comment">// （3） 离开手指 touchend</span></span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> startX = <span class="number">0</span>; <span class="comment">//获取手指初始坐标</span></span><br><span class="line">        <span class="keyword">var</span> startY = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">0</span>; <span class="comment">//获得盒子原来的位置</span></span><br><span class="line">        <span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line">        div.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  获取手指初始坐标</span></span><br><span class="line">            startX = e.targetTouches[<span class="number">0</span>].pageX;</span><br><span class="line">            startY = e.targetTouches[<span class="number">0</span>].pageY;</span><br><span class="line">            x = <span class="built_in">this</span>.offsetLeft;</span><br><span class="line">            y = <span class="built_in">this</span>.offsetTop;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        div.addEventListener(<span class="string">&#x27;touchmove&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//  计算手指的移动距离： 手指移动之后的坐标减去手指初始的坐标</span></span><br><span class="line">            <span class="keyword">var</span> moveX = e.targetTouches[<span class="number">0</span>].pageX - startX;</span><br><span class="line">            <span class="keyword">var</span> moveY = e.targetTouches[<span class="number">0</span>].pageY - startY;</span><br><span class="line">            <span class="comment">// 移动我们的盒子 盒子原来的位置 + 手指移动的距离</span></span><br><span class="line">            <span class="built_in">this</span>.style.left = x + moveX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            <span class="built_in">this</span>.style.top = y + moveY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            e.preventDefault(); <span class="comment">// 阻止屏幕滚动的默认行为</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>click 点击事件 300ms 延时</p>
</li>
<li><p>原因：移动端屏幕双击会缩放(double tap to zoom) 页面</p>
</li>
<li><p>解决方案：</p>
<blockquote>
<p>1、禁用缩放</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;user-scalable=no&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2、利用 touch事件 自己封装</p>
</blockquote>
<blockquote>
<p>3、使用 fastclick 插件</p>
</blockquote>
</li>
</ul>
<h4 id="3、本地存储"><a href="#3、本地存储" class="headerlink" title="3、本地存储"></a>3、本地存储</h4><blockquote>
<p>特性</p>
</blockquote>
<ul>
<li>数据存储在用户浏览器中</li>
<li>设置、读取方便、甚至页面刷新不丢失数据</li>
<li>容量较大，sessionStorage 约 5M、localStorage 约 20M</li>
<li>只能存储字符串，可以将对象 JSON.stringify() 编码后存储</li>
</ul>
<blockquote>
<p>window.sessionStorage</p>
</blockquote>
<ul>
<li><p>生命周期：关闭浏览器窗口</p>
</li>
<li><p>在同一个窗口（页面）下数据可以共享</p>
</li>
<li><p>以键值对的形式存储使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储数据</span></span><br><span class="line">sessionStorage.setItem(key, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line">sessionStorage.getItem(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line">sessionStorage.removeItem(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空数据（所有都清除掉）</span></span><br><span class="line">sessionStorage.clear()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>window.localStorage</p>
</blockquote>
<ul>
<li><p>生命周期：永久生效，除非手动删除，否则关闭页面也会存在</p>
</li>
<li><p>可以多窗口（页面）共享（同一浏览器可以共享）</p>
</li>
<li><p>以键值对的形式存储使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.setItem(key, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.getItem(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除数据</span></span><br><span class="line"><span class="built_in">localStorage</span>.removeItem(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空数据（所有都清除掉）</span></span><br><span class="line"><span class="built_in">localStorage</span>.clear()</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>更多详情，请收藏本博主，持续更新……谢谢！</strong></p>
<p>当然，如果您觉得此篇对您有所帮助，想请博主喝杯咖啡，请点击下方按钮，打开您的手机扫一扫，感谢您对本博主的赏识，博主感激不尽！</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>学习笔记</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 新语法规范</title>
    <url>/JavaScript-%E6%96%B0%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JavaScript 新语法规范，从最初的 <code>ES3</code> 到 <code>ES4</code> 及现在所一直保持的 <code>ES5</code> 规范，发现其中还存在很多问题。就针对发现的一些问题，做了新语法规范的改进，也就是现在的 <code>ES6</code> 及 <code>ES7/8/9</code> 甚至 E<code>S10</code>。下面是关于我对新语法规范学习的一些总结，如果有什么好的建议或者发现一些不好、错误的地方，还希望各位大佬在下方的评论区留言，谢谢！</p>
<p>学习总结过程的代码是基于 <a href="https://gitee.com/sunny-store/javascript-new-standard">Gitee 码云仓库</a> 进行管理的，有需要的可以自行提取，可以的话，请顺便点个 <code>star</code>，谢谢！</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>全局作用域和私有作用域，这两个作用域是我们玩 JavaScript 的人都知道的，那么 <code>ES6</code> 的到来，新增加了一个概念叫<code>块级作用域</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;全局变量 a = &#x27;</span> + a)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;全局变量 a = &#x27;</span> + a)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;test 函数作用域内部变量 b = &#x27;</span> + b)</span><br><span class="line">  <span class="keyword">if</span> (b === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">3</span></span><br><span class="line">    <span class="keyword">let</span> d = <span class="number">4</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;可以访问到全局变量 a = &#x27;</span> + a)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;可以访问到变量 c = &#x27;</span> + c)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;不能访问到变量 d = &#x27;</span> + d)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果</span></span><br><span class="line"><span class="comment"> * 全局变量 a = 1</span></span><br><span class="line"><span class="comment"> * 可以访问到全局变量 a = 1</span></span><br><span class="line"><span class="comment"> * test 函数作用域内部变量 b = 2</span></span><br><span class="line"><span class="comment"> * 全局变量 a = 1</span></span><br><span class="line"><span class="comment"> * 可以访问到变量 c = 3</span></span><br><span class="line"><span class="comment"> * Uncaught ReferenceError: d is not defined</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>从上面的代码中，我们可以知道，全局变量 <code>a</code> 在任何地方都可以被访问到，函数内部变量 <code>b</code> 和 <code>c</code> 在函数内部作用域中都可以被访问到，这也正是我们所熟悉的全局作用域和私有作用域，没毛病。那么变量 <code>d</code> 被访问的时候为什么就被报错了呢？</p>
<p>相信大家都注意到了，变量 <code>d</code> 是被 <code>let</code> 进行声明定义的，这也就是我们即将要说的 <code>块级作用域</code>，顾名思义，就是含有<code>块</code>的概念，这个块指的就是 <code>&#123;&#125;</code> 大括号，大括号内的作用域就是称为块级作用域。</p>
<p>我们发现，上述代码中，if()<code>&#123;...&#125;</code> 内的变量仍然可以被其大括号外部访问到，所以块级作用域的出现也正是为了弥补 JS 的这个缺陷，用 let 进行变量声明定义，就可以形成一个块级作用域，正如上述代码中的那样，变量 d 无法被访问到。</p>
<blockquote>
<p>Tips：let 声明定义的变量也没有变量提升的概念</p>
</blockquote>
<p>全局作用域、私有作用域和块级作用域都说到了，那么剩下的就是<code>动态作用域</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line">test()</span><br><span class="line">test.bind(&#123; <span class="attr">a</span>: <span class="number">10</span> &#125;)()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出结果</span></span><br><span class="line"><span class="comment"> * 1</span></span><br><span class="line"><span class="comment"> * 10</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>所谓动态作用域其实就是他的作用域不固定，我们可以通过一些方式，利用 <code>this</code> 指向，通过 <code>bind</code> 的方式改变 this 的指向，从而形成动态作用域。上述代码中，第一次输出结果 1，是因为 this 指向的是全局 window，输出结果 10，是因为 test.bind 将 this 指向了 { a: 10 } 这个对象，从而输出结果 10。</p>
<h4 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h4><p>关于 let 前面讲过了挺多，这里做以下总结：</p>
<ul>
<li>let 声明的变量具有块级作用域的概念；</li>
<li>let 声明的变量没有变量提升的概念；</li>
<li>let 声明的变量名不能重复；</li>
<li>let 声明的全局变量不能用全局对象的属性来访问。</li>
</ul>
<p>const 除了具备上述 let 的特点之外，<code>const 用于定义常量</code>，这是 const 独有的特点。</p>
<blockquote>
<p>Tips：另外就是 let 和 var 均可以先声明后赋值，但 const 不行。</p>
</blockquote>
<p><strong>更多详情，请收藏本博主，持续更新……谢谢！</strong></p>
<p>当然，如果您觉得此篇对您有所帮助，想请博主喝杯咖啡，请点击下方按钮，打开您的手机扫一扫，感谢您对本博主的赏识，博主感激不尽！</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>敲码神器之VS Code</title>
    <url>/%E6%95%B2%E7%A0%81%E7%A5%9E%E5%99%A8%E4%B9%8BVS-Code/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>“欢迎使用”，打开 VS Code，你便会发现有这么个窗口弹出来，这是 VS Code 表示对你的欢迎！</p>
<p>同样，您能花您宝贵的时间，来看我这篇对 VS Code 的介绍，相信你也是热爱 VS Code 的，那么请放下耐心往下浏览吧!</p>
<blockquote>
<p>Tips：下载请访问<a href="https://code.visualstudio.com/">官方网址</a>进行下载，下载完双击安装，点击下一步、下一步即可完成安装（建议：安装路径选择非C盘的其它路径）</p>
</blockquote>
<p><img src="https://static001.geekbang.org/resource/image/58/4f/588bcd217ad7d2c5d18cbab0b1781a4f.png"></p>
<h3 id="快速上手-VS-Code"><a href="#快速上手-VS-Code" class="headerlink" title="快速上手 VS Code"></a>快速上手 VS Code</h3><h4 id="1、命令面板"><a href="#1、命令面板" class="headerlink" title="1、命令面板"></a>1、命令面板</h4><p>说明：VS Code 快捷键的主要交互界面</p>
<p>打开快捷键</p>
<ul>
<li><p>Windows：Ctrl + Shift + P</p>
</li>
<li><p>MacOS：Cmd + Shift + P</p>
</li>
</ul>
<p><img src="https://static001.geekbang.org/resource/image/24/0d/2471149edc2c94a6745a34b5c917d00d.png"></p>
<p>作用：熟练使用命令面板，你就可以摆脱鼠标，完全通过键盘操作来完成全部编码工作（一点都不夸张哦~）</p>
<h4 id="2、界面概览"><a href="#2、界面概览" class="headerlink" title="2、界面概览"></a>2、界面概览</h4><p>说明：VS Code 默认界面里的不同部件的位置、名称和快捷键。</p>
<p>相关快捷键：</p>
<ul>
<li>文件资源管理器：Ctrl + Shift + E</li>
<li>跨文件搜索（全局搜索）：Ctrl + Shift + F</li>
<li>源代码管理：Ctrl + Shift + G</li>
<li>启动和调试：Ctrl + Shift + D</li>
<li>管理扩展：Ctrl + Shift + X</li>
<li>查看错误和警告：Ctrl + Shift + M</li>
</ul>
<p><img src="https://static001.geekbang.org/resource/image/67/78/67025c889d9e28fecc7d4a71e3904c78.png"></p>
<h4 id="3、交互式演习场"><a href="#3、交互式演习场" class="headerlink" title="3、交互式演习场"></a>3、交互式演习场</h4><p>VS Code 官方提供的熟悉方式，由于全是英文的，有兴趣的可以自行了解哈<del>~</del></p>
<h4 id="4、命令行的使用"><a href="#4、命令行的使用" class="headerlink" title="4、命令行的使用"></a>4、命令行的使用</h4><p>命令行你应该不陌生，Win + R，输入 cmd，弹出的黑白框，没少玩过吧~</p>
<p>到了 VS Code，一个关键的词语你得记住了 <code>Code</code>，没错，时不时觉得很具有代表性，哈哈~可以试着通过 <code>code --help</code>打印出 VS Code 命令行所支持的所有参数，这里介绍几个常用的。</p>
<p><strong>code + 文件或者文件夹的地址</strong>，这样 VS Code 就会在一个新窗口中打开这个文件或文件夹</p>
<blockquote>
<p>例如：我们用 vue-cli 初始化一个 vue 项目的时候会提示 cd xxx 文件夹，然后 npm run serve，这个时候当你执行了 cd 命令，进入到了这个初始化项目文件目录的时候，就可以执行 <code>code .</code> 命令，这样就可以快速在一个新窗口打开这个项目了。</p>
</blockquote>
<p>当然，如果你希望使用已经打开的窗口来打开文件，可以在 <code>code</code> 命令后添加参数 <code>-r</code>来进行窗口的复用</p>
<p><img src="https://static001.geekbang.org/resource/image/6c/b9/6ca4986f77f1da58759801894d6cf8b9.gif"></p>
<p>你也可以使用参数 <code>-g &lt;file:line[:character]&gt;</code> 打开文件，然后滚动到文件中某个特定的行和列，比如输入 <code>code -r -g package.json:128</code>命令，你就可以打开 package.json 这个文件，然后自动跳转到 128 行。这个命令可以方便你从终端里快速地在 VS Code 里打开一个文件进行预览，一个特别常见的例子就是当我们使用脚本执行某个命令，这个命令告诉我们某个文件的某一行出现了错误，我们就能够快速定位了。</p>
<p><img src="https://static001.geekbang.org/resource/image/2b/30/2b0ac41fcf93cfb74dc4c2712b8ab630.gif"></p>
<p>VS Code 也可以用来比较两个文件的内容，你只需使用 <code>-d</code>参数，并传入两个文件路径，比如输入 <code>code -r -d a.txt b.txt</code>命令，就可以比较 a.txt 和 b.txt 两个文件的内容了。有了这个命令，你就可以既使用命令行运行脚本，也可以借助 VS Code 的图形化界面进行文件内容的对比了。</p>
<p><img src="https://static001.geekbang.org/resource/image/c7/d4/c76cf6fed94d1eb1722d949ee1e632d4.gif"></p>
<p>VS Code 命令行除了支持打开磁盘上的文件以外，也接受来自管道中的数据。这样你就可以将原本在命令行中展示的内容，实时地展示在 VS Code 里，然后在编辑器中搜索和修改。</p>
<blockquote>
<p>例如，你可以把当前目录下所有的文件名都展示在编辑器里，此时只需使用<code>ls | code -</code>命令。</p>
</blockquote>
<p><img src="https://static001.geekbang.org/resource/image/4b/3e/4b7b576d51156c4f80fd4957135ffe3e.gif"></p>
<p>另外，VS Code 命令行还能够管理插件，查看 VS Code 的运行情况，记录和分析 VS Code 运行性能，你也可以现在就开始小试牛刀，试试它的威力。</p>
<p><strong>更多详情，请收藏本博主，持续更新……谢谢！</strong></p>
<p>当然，如果您觉得此篇对您有所帮助，想请博主喝杯咖啡，请点击下方按钮，打开您的手机扫一扫，感谢您对本博主的赏识，博主感激不尽！</p>
<p>备注：此篇学习自吕鹏大佬的玩转 VS Code，如有侵权请告知删除，谢谢！</p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>IDE</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>React 学习之旅</title>
    <url>/React-%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%97%85/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>关于 React 是什么，我想我也不用多说了，学就完了，干就完了</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>关于 React 的安装，这里不做过多的累赘，请移步：<a href="https://react.docschina.org/docs/create-a-new-react-app.html">React 安装</a></p>
<h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><ul>
<li><p>node_modules：包管理文件</p>
</li>
<li><p>public：Html 入口文件 &amp;&amp; 资源文件</p>
</li>
<li><p>src：源码文件</p>
</li>
</ul>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="1、JSX-语法"><a href="#1、JSX-语法" class="headerlink" title="1、JSX 语法"></a>1、JSX 语法</h4><p><code>js</code> 语法 + <code>xml</code> 语法（可以理解为 HTML）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;hello react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;&gt;&lt;/&gt;: 作为 xml（html）语法解析</span></span><br><span class="line"><span class="comment"> * &#123; ... &#125;: 作为 js 语法解析 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1&gt;Hello, &#123;name&#125;&lt;/h1&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="2、元素渲染"><a href="#2、元素渲染" class="headerlink" title="2、元素渲染"></a>2、元素渲染</h4><p>说白了就是，能看到实际效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 注意：这里是 ()，而不是 &#123;&#125;</span></span><br><span class="line">  <span class="keyword">const</span> element = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class="line">      &lt;h2&gt;It is &#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 需要放到函数内，才能得到 element</span></span><br><span class="line">  ReactDOM.render(element, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(tick, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3、组件创建"><a href="#3、组件创建" class="headerlink" title="3、组件创建"></a>3、组件创建</h4><p>tips: 组件文件后缀名是 .js 或者 .jsx（有代码提示）</p>
<p>类 class 形式创建：Home.jsx</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 渲染函数</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> ( <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学习 react<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure>

<h4 id="4、props"><a href="#4、props" class="headerlink" title="4、props"></a>4、props</h4><p>props 的出现，使得组件可以进行传值，即组件可复用了</p>
<p><strong>注意：</strong>接收唯一带有数据的 “props”（代表属性）对象，且子组件不可以修改 props 的值，要修改也是去父组件修改</p>
<p><strong>父组件向子组件传值：父组件以标识属性的方式进行传值，子组件以 props 进行接收</strong></p>
<ul>
<li><p>父组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入子组件</span></span><br><span class="line"><span class="keyword">import</span> MyNav <span class="keyword">from</span> <span class="string">&#x27;./myNav&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 父组件定义传递数据</span></span><br><span class="line">    <span class="keyword">let</span> nav_1 = [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>, <span class="string">&#x27;c#&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> nav_2 = [<span class="string">&#x27;从&#x27;</span>, <span class="string">&#x27;入门&#x27;</span>, <span class="string">&#x27;到&#x27;</span>, <span class="string">&#x27;放弃&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;学习 react&lt;/h1&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">/**</span></span><br><span class="line"><span class="comment">           * 传递数据，可以是任意类型</span></span><br><span class="line"><span class="comment">           * title、nav，传递属性，子组件用于接收的标识属性</span></span><br><span class="line"><span class="comment">           */</span></span><br><span class="line">        &#125;</span><br><span class="line">        &lt;MyNav title=<span class="string">&quot;语言导航&quot;</span> nav=&#123;nav_1&#125; /&gt;</span><br><span class="line">        &lt;MyNav title=<span class="string">&quot;忠言导航&quot;</span> nav=&#123;nav_2&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure>
</li>
<li><p>子组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNav</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="comment">/* 接收 title 属性标识的数据 */</span>&#125;</span><br><span class="line">        &lt;h3&gt;&#123;<span class="built_in">this</span>.props.title&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="comment">// 接收 nav 属性标识的数据，并遍历</span></span><br><span class="line">            <span class="built_in">this</span>.props.nav.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#x27;index&#x27;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyNav</span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><strong>子组件向父组件传值：子组件通过调用 props 接收到的父级方法，以参数传递的形式向父组件进行传值</strong></p>
<ul>
<li><p>父组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">// 引入子组件</span></span><br><span class="line"><span class="keyword">import</span> MyNav <span class="keyword">from</span> <span class="string">&#x27;./myNav&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      text: <span class="string">&#x27;我是父组件数据&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 该方法用于传递到子组件，子组件接收调用，并向父组件传值</span></span><br><span class="line"><span class="comment">   * sunData: 子组件传递过来的数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  handleText = <span class="function">(<span class="params">sunData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      text: sunData</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="built_in">this</span>.state.text&#125;&lt;/p&gt;</span><br><span class="line">        &#123;<span class="comment">/* handleTexts: 传递给子组件的方法，用于子组件调用并向父组件传参 */</span>&#125;</span><br><span class="line">        &lt;MyNav handleTexts=&#123; <span class="built_in">this</span>.handleText &#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home</span><br></pre></td></tr></table></figure>
</li>
<li><p>子组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNav</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props)</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      text: <span class="string">&#x27;我是子组件的数据&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * handleChangeTexts: 该方法用于子组件调用，实现子组件点击修改父组件 state 数据</span></span><br><span class="line"><span class="comment">   * handleTexts: 该方法为父组件传递过来的，子组件接收调用，并向父组件传递参数: this.state.text</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  handleChangeTexts = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.props.handleTexts(<span class="built_in">this</span>.state.text)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123; <span class="built_in">this</span>.handleChangeTexts &#125;&gt;修改父组件 state 数据&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyNav</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5、state"><a href="#5、state" class="headerlink" title="5、state"></a>5、state</h4><p>State 与 props 类似，但是 state 是私有的，并且完全受控于当前组件，即：<strong>State 是当前组件的</strong></p>
<p>定义位置：当前组件的 <strong>构造函数</strong> 中，即：<strong>constructor 中</strong></p>
<blockquote>
<p><strong>setState 的同步异步问题</strong></p>
<p><code>tips：setState 会引起视图重绘</code></p>
</blockquote>
<ul>
<li><p>在非可控的情况下是同步</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetStateDemo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击 count +1 按钮，加 1</span></span><br><span class="line">  handleButton() &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="built_in">this</span>.state.count</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非可控的情况下是同步，点击一次</span></span><br><span class="line"><span class="comment">     * 页面显示：1</span></span><br><span class="line"><span class="comment">     * 控制台：0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: count+<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;setState 是同步还是异步&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/p&gt; </span><br><span class="line">        &lt;button onClick=&#123; <span class="built_in">this</span>.handleButton.bind(<span class="built_in">this</span>) &#125;&gt;count +<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SetStateDemo</span><br></pre></td></tr></table></figure>
</li>
<li><p>在可控的情况下是异步</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetStateDemo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">super</span>()</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写法一：</span></span><br><span class="line">  <span class="comment">// 点击 count +1 按钮，加 1</span></span><br><span class="line">  <span class="comment">// handleButton() &#123;</span></span><br><span class="line">    <span class="comment">// let count = this.state.count</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在可控的情况下是异步，点击一次</span></span><br><span class="line"><span class="comment">     * 页面显示：1</span></span><br><span class="line"><span class="comment">     * 控制台：1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// this.setState(&#123;</span></span><br><span class="line">    <span class="comment">//   count: count+1</span></span><br><span class="line">    <span class="comment">// &#125;, () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(this.state.count)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 写法二：promise async await</span></span><br><span class="line">  <span class="keyword">async</span> handleButton() &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="built_in">this</span>.state.count</span><br><span class="line">    <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">      count: count+<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.setStateAsync(&#123;<span class="attr">count</span>: count+<span class="number">1</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.count)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// promise 处理异步</span></span><br><span class="line">  setStateAsync(state) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(state, resolve)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;setState 是同步还是异步&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="built_in">this</span>.state.count&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="built_in">this</span>.handleButton.bind(<span class="built_in">this</span>)&#125;&gt;count +<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> SetStateDemo</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="6、生命周期函数"><a href="#6、生命周期函数" class="headerlink" title="6、生命周期函数"></a>6、生命周期函数</h4><ul>
<li><code>componentWillMount</code>：在组件渲染之前执行</li>
<li><code>componentDidMount</code>：在组件渲染之后执行</li>
<li><code>shouldComponentUpdate</code>：返回 <code>true</code> 和 <code>false</code>，<code>true</code> 代表允许改变，<code>false</code> 代表不允许改变</li>
<li><code>componentWillUpdate</code>：数据在改变之前执行 ( <code>state</code>，<code>props</code> )</li>
<li><code>componentDidUpdate</code>：数据修改完成 (<code>state</code>，<code>props</code> )</li>
<li><code>componentWillReveiceProps</code>：<code>props</code> 发生改变执行</li>
<li><code>componentWillUnmount</code>：组件卸载前执行</li>
</ul>
<p>贴图</p>
<h4 id="7、条件渲染"><a href="#7、条件渲染" class="headerlink" title="7、条件渲染"></a>7、条件渲染</h4><p>React 中的条件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 <code>if</code> 或者 条件运算符 去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI</p>
<p>常见应用</p>
<ul>
<li>根据条件进行视图切换，如：未登录 切换到 登陆</li>
<li>做缺省值，如: 数据未加载完成，提示 “数据还在加载中…”</li>
</ul>
<h4 id="8、列表-amp-key"><a href="#8、列表-amp-key" class="headerlink" title="8、列表 &amp; key"></a>8、列表 &amp; key</h4><p>起因：数据量一旦变的庞大，层次结构变得复杂的时候，整个渲染就会变慢，绑定 key 也是为了解决这个问题</p>
<p><strong>key 的概念和作用</strong></p>
<p>前面提到 <code>setState</code> 会引起视图的<code>重绘</code>，因为你一个 <code>state</code> 的改变可能引起整个数据结构的改变（牵一发而动全身），有数组或者对象等遍历型数据的时候，<strong>外层包裹一个 <code>key</code> 属性，<code>唯一标识</code>，如果数据的索引未发生改变，UI 不会重绘，只有发生变化的部分会重绘</strong>，这样就可以使得整体的一个性能得到优化提升</p>
<h4 id="9、表单"><a href="#9、表单" class="headerlink" title="9、表单"></a>9、表单</h4><p>受控组件：表单内的 value 值是通过 state 进行管理的（表单数据较少情况下，使用频率高）</p>
<blockquote>
<p><strong>Tips:</strong> 因为 <code>state</code> 的数据只能是通过 <code>setState</code> 进行修改的，所以需要绑定对应的  <code>onChange</code> 事件去进行操作</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormDemo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            <span class="comment">// 表单的 value 值</span></span><br><span class="line">            value:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表单提交事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.state.value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作 state value 值改变的 change 事件处理函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onChangeHandler = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            value: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;form onSubmit=&#123;<span class="built_in">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;text&quot;</span> value=&#123; <span class="built_in">this</span>.state.value &#125; onChange=&#123; <span class="built_in">this</span>.onChangeHandler &#125;/&gt;</span><br><span class="line">                    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;&lt;/input&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> FormDemo</span><br></pre></td></tr></table></figure>

<p>非受控组件：表单内的 value 值通过操作 DOM 的形式进行管理（表单数据较多，处理较多的情况下）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefsForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">// 定义多个不同的 ref 进行标识操作</span></span><br><span class="line">        <span class="built_in">this</span>.username = React.createRef();</span><br><span class="line">        <span class="built_in">this</span>.password = React.createRef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clickHandler = <span class="function">(<span class="params">e</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 进行对应的 ref 操作</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.username.current.value);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.password.current.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123; <span class="built_in">this</span>.username &#125;/&gt;</span><br><span class="line">                &lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123; <span class="built_in">this</span>.password &#125;/&gt;</span><br><span class="line">                &#123; <span class="comment">/* 非受控组件：这里就只需要定义一个处理事件去操作 */</span> &#125;</span><br><span class="line">                &lt;button onClick=&#123; <span class="built_in">this</span>.clickHandler &#125;&gt;提交&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RefsForm</span><br></pre></td></tr></table></figure>

<p><code>refs and the DOM</code>：以 refs 的方式进行操作 DOM（尽量避免，少使用）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefsAndDOM</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">// 1、创建 refs，</span></span><br><span class="line">        <span class="built_in">this</span>.myRef = React.createRef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3、访问 ref: this.ref 名称.current</span></span><br><span class="line"><span class="comment">         * current: 被访问当前节点属性对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">this</span>.myRef.current.style.color = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123; <span class="comment">/* 2、通过 ref 属性附加到 React 元素 */</span> &#125;</span><br><span class="line">                &lt;div ref=&#123; <span class="built_in">this</span>.myRef &#125;&gt;</span><br><span class="line">                    Hello</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RefsAndDOM</span><br></pre></td></tr></table></figure>

<h4 id="10、状态提升"><a href="#10、状态提升" class="headerlink" title="10、状态提升"></a>10、状态提升</h4><p>前面学习了 <code>父子组件传值</code> ，那么简单点说，就是兄弟组件之间以父组件进行建立联系、通信</p>
<p>具体详情，请异步 <a href="https://react.docschina.org/docs/lifting-state-up.html">官方文档</a></p>
<h4 id="11、组合-VS-继承"><a href="#11、组合-VS-继承" class="headerlink" title="11、组合 VS 继承"></a>11、组合 VS 继承</h4><p>组合：为了考虑到组件更好的复用性，采取 <code>组件套组件</code> 的形式，实现组件的复用</p>
<p>被套组件内容读取形式：<code>this.props.children</code></p>
<p><strong>官方说：能用 组合 不用 继承</strong>，所以继承介绍的少</p>
<h3 id="React-Router"><a href="#React-Router" class="headerlink" title="React-Router"></a>React-Router</h3><p>官方文档（英文）：<a href="https://reactrouter.com/web/guides/quick-start">https://reactrouter.com/web/guides/quick-start</a></p>
<p>对于路由这东西，多查查文档会比较好</p>
<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><p>Redux 是 JavaScript 状态容器（说白了就是数据仓库，管理数据的），让人觉得一脸懵逼的 <a href="https://www.redux.org.cn/">中文文档</a></p>
<ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save-dev redux</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducers/counters&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、创建 store 仓库（主函数中）</span></span><br><span class="line"><span class="comment"> *  - 方式：createStore(&#x27;参数是一个函数&#x27;)</span></span><br><span class="line"><span class="comment"> * subscribe：监听数据的改变</span></span><br><span class="line"><span class="comment"> *  - 参数：Function</span></span><br><span class="line"><span class="comment"> * getState：获取到 state 数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2、对应组件中定义事件并分发 action</span></span><br><span class="line"><span class="comment"> * onIncrement: 加 1 事件</span></span><br><span class="line"><span class="comment"> * onIncrement: 减 1 事件</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * dispatch：store 的方法，分发 action，触发 state 的变化（唯一途径）</span></span><br><span class="line"><span class="comment"> *  - 参数：action，是一个描述应用变化的普通对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reder = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    &lt;App </span><br><span class="line">      onIncrement = &#123; <span class="function">() =&gt;</span> store.dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;INCREMENT&quot;</span> &#125;)&#125;</span><br><span class="line">      onDecrement = &#123; <span class="function">() =&gt;</span> store.dispatch(&#123; <span class="attr">type</span>: <span class="string">&quot;DECREMENT&quot;</span> &#125;)&#125;</span><br><span class="line">      value = &#123; store.getState() &#125;</span><br><span class="line">    /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reder();</span><br><span class="line">store.subscribe(reder)</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">        &#123;<span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 4、子组件接收并触发事件</span></span><br><span class="line"><span class="comment">          */</span>&#125;</span><br><span class="line">        &lt;h1&gt;&#123; <span class="built_in">this</span>.props.value &#125;&lt;/h1&gt;</span><br><span class="line">        &lt;button onClick=&#123; <span class="built_in">this</span>.props.onIncrement &#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123; <span class="built_in">this</span>.props.onDecrement &#125;&gt;<span class="number">-1</span>&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reducer.js</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3、定义 action.type，不同的类型做不同的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>state 仓库中所存储的数据状态（数据）</span></span><br><span class="line"><span class="comment"> *  - state = 0：数据初始化（ES6 写法）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>action 改变数据状态（数据）的方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>action.type 不同的值可以做不同的修改</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * INCREMENT：代表类型操作为 + 1</span></span><br><span class="line"><span class="comment"> * DECREMENT：代表类型操作为 - 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = <span class="number">0</span>,action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;INCREMENT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;DECREMENT&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h3><p><strong>更多详情，请收藏本博主，持续更新……谢谢！</strong></p>
<p>当然，如果您觉得此篇对您有所帮助，想请博主喝杯咖啡，请点击下方按钮，打开您的手机扫一扫，感谢您对本博主的赏识，博主感激不尽！</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>总结</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题汇总</title>
    <url>/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><h3 id="主流框架"><a href="#主流框架" class="headerlink" title="主流框架"></a>主流框架</h3><h3 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h3><p><strong>更多详情，请收藏本博主，持续更新……谢谢！</strong></p>
<p>当然，如果您觉得此篇对您有所帮助，想请博主喝杯咖啡，请点击下方按钮，打开您的手机扫一扫，感谢您对本博主的赏识，博主感激不尽！</p>
]]></content>
      <categories>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>前端面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>前端练习案例集合</title>
    <url>/%E5%89%8D%E7%AB%AF%E7%BB%83%E4%B9%A0%E6%A1%88%E4%BE%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>案例有大有小，日常学习，闲暇娱乐~</p>
<h3 id="基本案例"><a href="#基本案例" class="headerlink" title="基本案例"></a>基本案例</h3><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p><strong>更多详情，请收藏本博主，持续更新……谢谢！</strong></p>
<p>当然，如果您觉得此篇对您有所帮助，想请博主喝杯咖啡，请点击下方按钮，打开您的手机扫一扫，感谢您对本博主的赏识，博主感激不尽！</p>
]]></content>
      <categories>
        <category>练习案例</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>前端案例</tag>
      </tags>
  </entry>
</search>
